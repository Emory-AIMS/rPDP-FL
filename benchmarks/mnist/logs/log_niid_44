Project Path:  /data/privacyGroup/liujunxu/Fed-rPDP
noise_multiplier :  12.373046875
Round=0, perf=[1190, 1296, 752, 1075, 1280, 1071, 969, 1204, 884, 640], mean perf=10361/20016 (0.5176%)
Round=1, perf=[1769, 1532, 1420, 1752, 1383, 1480, 1305, 1622, 1612, 1500], mean perf=15375/20016 (0.7681%)
Round=2, perf=[1856, 1631, 1670, 1812, 1545, 1589, 1471, 1719, 1775, 1570], mean perf=16638/20016 (0.8312%)
Round=3, perf=[1889, 1829, 1837, 1895, 1784, 1793, 1677, 1875, 1864, 1625], mean perf=18068/20016 (0.9027%)
Round=4, perf=[1936, 1842, 1874, 1944, 1808, 1846, 1705, 1867, 1912, 1661], mean perf=18395/20016 (0.9190%)
Round=5, perf=[1921, 1920, 1943, 1935, 1874, 1904, 1773, 1882, 1910, 1665], mean perf=18727/20016 (0.9356%)
Round=6, perf=[1657, 1935, 1957, 1666, 1888, 1903, 1773, 1652, 1647, 1402], mean perf=17480/20016 (0.8733%)
Round=7, perf=[1933, 1950, 1962, 1941, 1901, 1943, 1776, 1906, 1920, 1657], mean perf=18889/20016 (0.9437%)
Round=8, perf=[1965, 1952, 1968, 1970, 1894, 1946, 1787, 1916, 1947, 1679], mean perf=19024/20016 (0.9504%)
Round=9, perf=[1971, 1965, 1976, 1977, 1904, 1949, 1797, 1922, 1949, 1690], mean perf=19100/20016 (0.9542%)
Round=10, perf=[1978, 1961, 1979, 1982, 1896, 1950, 1795, 1919, 1954, 1692], mean perf=19106/20016 (0.9545%)
Round=11, perf=[1951, 1953, 1975, 1970, 1895, 1922, 1797, 1933, 1943, 1697], mean perf=19036/20016 (0.9510%)
Round=12, perf=[1978, 1974, 1980, 1977, 1912, 1966, 1805, 1934, 1959, 1689], mean perf=19174/20016 (0.9579%)
Round=13, perf=[1977, 1962, 1975, 1979, 1900, 1955, 1800, 1930, 1952, 1691], mean perf=19121/20016 (0.9553%)
Round=14, perf=[1985, 1980, 1985, 1981, 1913, 1968, 1809, 1940, 1965, 1696], mean perf=19222/20016 (0.9603%)
Mean performance without rPDP, Mean Perf=0.9578
../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the largest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
r2 score of the curve fitting. 0.9998451794812138
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[321, 182, 128, 206, 70, 55, 72, 184, 188, 251], mean perf=1657/20016 (0.0828%)
Round=1, perf=[470, 431, 435, 357, 350, 72, 181, 102, 106, 213], mean perf=2717/20016 (0.1357%)
Round=2, perf=[311, 531, 327, 322, 519, 244, 239, 199, 9, 15], mean perf=2716/20016 (0.1357%)
Round=3, perf=[73, 476, 388, 19, 401, 407, 432, 77, 13, 78], mean perf=2364/20016 (0.1181%)
Round=4, perf=[420, 406, 432, 23, 32, 0, 439, 53, 34, 434], mean perf=2273/20016 (0.1136%)
Round=5, perf=[469, 515, 561, 304, 319, 91, 649, 326, 157, 616], mean perf=4007/20016 (0.2002%)
Round=6, perf=[303, 697, 415, 486, 873, 543, 879, 695, 209, 491], mean perf=5591/20016 (0.2793%)
Round=7, perf=[709, 720, 685, 898, 855, 324, 837, 744, 327, 812], mean perf=6911/20016 (0.3453%)
Round=8, perf=[443, 746, 731, 741, 1114, 403, 807, 579, 204, 417], mean perf=6185/20016 (0.3090%)
Round=9, perf=[752, 684, 895, 870, 756, 320, 962, 625, 382, 1007], mean perf=7253/20016 (0.3624%)
Round=10, perf=[498, 551, 335, 826, 911, 450, 780, 967, 368, 685], mean perf=6371/20016 (0.3183%)
Round=11, perf=[602, 578, 440, 651, 713, 637, 525, 816, 664, 451], mean perf=6077/20016 (0.3036%)
Round=12, perf=[639, 783, 777, 915, 1080, 691, 911, 1125, 762, 715], mean perf=8398/20016 (0.4196%)
Round=13, perf=[921, 804, 920, 878, 956, 628, 609, 959, 937, 528], mean perf=8140/20016 (0.4067%)
Round=14, perf=[797, 464, 824, 940, 929, 412, 679, 1066, 1019, 710], mean perf=7840/20016 (0.3917%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.4060
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.021965964339383415 / 0.5678197400135198, expected_batch_size: 653 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[453, 518, 62, 64, 73, 420, 20, 409, 404, 1], mean perf=2424/20016 (0.1211%)
Round=3, perf=[863, 1268, 658, 639, 910, 959, 616, 783, 531, 301], mean perf=7528/20016 (0.3761%)
Round=4, perf=[882, 1414, 1115, 944, 1252, 1088, 1060, 1015, 663, 769], mean perf=10202/20016 (0.5097%)
Round=5, perf=[783, 1217, 1430, 1024, 1431, 900, 1257, 979, 685, 881], mean perf=10587/20016 (0.5289%)
Round=6, perf=[964, 1209, 1500, 1129, 1395, 832, 1238, 1152, 894, 1040], mean perf=11353/20016 (0.5672%)
Round=7, perf=[1014, 1283, 1491, 1174, 1475, 893, 1304, 1224, 923, 1057], mean perf=11838/20016 (0.5914%)
Round=8, perf=[1059, 1228, 1510, 1195, 1423, 831, 1266, 1172, 957, 1104], mean perf=11745/20016 (0.5868%)
Round=9, perf=[1253, 1400, 1463, 1306, 1494, 1089, 1323, 1468, 1185, 1194], mean perf=13175/20016 (0.6582%)
Round=10, perf=[1222, 1347, 1427, 1343, 1525, 1079, 1318, 1424, 1154, 1219], mean perf=13058/20016 (0.6524%)
Round=11, perf=[1209, 1462, 1438, 1318, 1611, 1204, 1372, 1544, 1221, 1143], mean perf=13522/20016 (0.6756%)
Round=12, perf=[1233, 1404, 1442, 1405, 1542, 1227, 1316, 1538, 1301, 1250], mean perf=13658/20016 (0.6824%)
Round=13, perf=[1390, 1506, 1472, 1444, 1541, 1284, 1364, 1575, 1337, 1281], mean perf=14194/20016 (0.7091%)
Round=14, perf=[1288, 1452, 1403, 1321, 1511, 1204, 1316, 1513, 1218, 1198], mean perf=13424/20016 (0.6707%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.0001, Perf=0.6874, seed=44
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17742571183510908, expected_batch_size: 140 / 3960
Round=0, perf=[390, 430, 0, 3, 0, 398, 0, 399, 408, 2], mean perf=2030/20016 (0.1014%)
Round=1, perf=[544, 378, 0, 226, 1, 353, 1, 562, 574, 238], mean perf=2877/20016 (0.1437%)
Round=2, perf=[422, 430, 25, 40, 48, 392, 24, 475, 474, 57], mean perf=2387/20016 (0.1193%)
Round=3, perf=[339, 597, 127, 15, 231, 552, 185, 437, 375, 23], mean perf=2881/20016 (0.1439%)
Round=4, perf=[625, 683, 987, 619, 370, 385, 441, 43, 292, 671], mean perf=5116/20016 (0.2556%)
Round=5, perf=[667, 675, 459, 677, 678, 229, 277, 477, 265, 256], mean perf=4660/20016 (0.2328%)
Round=6, perf=[833, 1003, 1320, 719, 933, 560, 959, 722, 710, 803], mean perf=8562/20016 (0.4278%)
Round=7, perf=[908, 829, 1345, 1107, 1091, 586, 1046, 1035, 954, 1082], mean perf=9983/20016 (0.4988%)
Round=8, perf=[847, 1258, 1056, 867, 1124, 832, 1045, 801, 444, 728], mean perf=9002/20016 (0.4497%)
Round=9, perf=[805, 1042, 966, 995, 1314, 952, 951, 1340, 1010, 619], mean perf=9994/20016 (0.4993%)
Round=10, perf=[803, 871, 1053, 1332, 1394, 833, 974, 1196, 943, 870], mean perf=10269/20016 (0.5130%)
Round=11, perf=[1311, 1064, 1126, 1647, 1344, 1230, 1026, 1408, 1422, 1177], mean perf=12755/20016 (0.6372%)
Round=12, perf=[1292, 1398, 1410, 1175, 1325, 1044, 1195, 1471, 1275, 1086], mean perf=12671/20016 (0.6330%)
Round=13, perf=[1265, 1409, 1558, 1368, 1503, 1178, 1380, 1488, 1298, 1253], mean perf=13700/20016 (0.6845%)
Round=14, perf=[1293, 1463, 1491, 1300, 1456, 1034, 1347, 1368, 1114, 1241], mean perf=13107/20016 (0.6548%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.6574
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021967153702097345 / 0.021967153702097345, expected_batch_size: 86 / 3960
Round=0, perf=[11, 254, 10, 8, 233, 272, 273, 218, 8, 4], mean perf=1291/20016 (0.0645%)
Round=1, perf=[178, 312, 39, 174, 245, 280, 247, 398, 213, 213], mean perf=2299/20016 (0.1149%)
Round=2, perf=[394, 417, 436, 397, 432, 48, 41, 1, 1, 0], mean perf=2167/20016 (0.1083%)
Round=3, perf=[221, 606, 506, 358, 654, 428, 538, 197, 50, 154], mean perf=3712/20016 (0.1855%)
Round=4, perf=[520, 507, 667, 234, 376, 3, 399, 135, 149, 292], mean perf=3282/20016 (0.1640%)
Round=5, perf=[449, 612, 547, 602, 752, 351, 462, 420, 224, 278], mean perf=4697/20016 (0.2347%)
Round=6, perf=[685, 699, 451, 301, 438, 392, 123, 554, 522, 11], mean perf=4176/20016 (0.2086%)
Round=7, perf=[396, 664, 821, 418, 968, 374, 717, 718, 519, 170], mean perf=5765/20016 (0.2880%)
Round=8, perf=[479, 1018, 514, 440, 871, 821, 741, 726, 366, 257], mean perf=6233/20016 (0.3114%)
Round=9, perf=[448, 980, 428, 324, 778, 899, 755, 833, 456, 294], mean perf=6195/20016 (0.3095%)
Round=10, perf=[696, 716, 327, 666, 628, 512, 514, 900, 510, 490], mean perf=5959/20016 (0.2977%)
Round=11, perf=[855, 1013, 521, 730, 792, 744, 739, 1079, 638, 616], mean perf=7727/20016 (0.3860%)
Round=12, perf=[569, 1147, 775, 776, 1214, 850, 1049, 941, 377, 496], mean perf=8194/20016 (0.4094%)
Round=13, perf=[875, 1210, 615, 821, 1045, 910, 914, 1154, 599, 600], mean perf=8743/20016 (0.4368%)
Round=14, perf=[938, 1299, 1152, 842, 1284, 888, 1069, 1205, 840, 620], mean perf=10137/20016 (0.5064%)
Mean performance of StrongForAll, eps=[array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])
 array([0.10000917, 0.10000917, 0.10000917, ..., 0.10000917, 0.10000917,
        0.10000917])                                                    ], delta=0.0001, Perf=0.4509
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.021972647309981188 / 1.0, expected_batch_size: 322 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[522, 542, 119, 126, 93, 398, 1, 400, 405, 2], mean perf=2608/20016 (0.1303%)
Round=2, perf=[575, 541, 664, 770, 567, 205, 332, 307, 236, 474], mean perf=4671/20016 (0.2334%)
Round=3, perf=[499, 832, 907, 615, 978, 555, 779, 647, 349, 423], mean perf=6584/20016 (0.3289%)
Round=4, perf=[588, 1112, 906, 772, 1190, 793, 904, 721, 407, 400], mean perf=7793/20016 (0.3893%)
Round=5, perf=[651, 939, 979, 774, 1162, 758, 869, 1008, 794, 514], mean perf=8448/20016 (0.4221%)
Round=6, perf=[760, 1075, 833, 1068, 1156, 1044, 934, 968, 612, 793], mean perf=9243/20016 (0.4618%)
Round=7, perf=[744, 914, 1171, 1111, 1241, 879, 854, 1039, 960, 749], mean perf=9662/20016 (0.4827%)
Round=8, perf=[733, 908, 1088, 1135, 1281, 817, 903, 1033, 864, 838], mean perf=9600/20016 (0.4796%)
Round=9, perf=[1196, 1395, 1391, 1275, 1425, 1057, 1284, 1352, 1056, 1191], mean perf=12622/20016 (0.6306%)
Round=10, perf=[924, 1075, 1191, 1211, 1375, 940, 973, 1176, 1016, 856], mean perf=10737/20016 (0.5364%)
Round=11, perf=[970, 1176, 1335, 978, 1354, 826, 1109, 1258, 1003, 803], mean perf=10812/20016 (0.5402%)
Round=12, perf=[914, 1189, 1268, 1165, 1473, 1089, 1098, 1373, 1144, 814], mean perf=11527/20016 (0.5759%)
Round=13, perf=[1269, 1413, 1504, 1507, 1582, 1351, 1351, 1493, 1375, 1218], mean perf=14063/20016 (0.7026%)
Round=14, perf=[1418, 1425, 1498, 1472, 1525, 1191, 1385, 1606, 1375, 1310], mean perf=14205/20016 (0.7097%)
Mean performance of BoundedPareto, min_eps=0.1001, max_eps=10.0000, delta=0.0001, Perf=0.6627, seed=44
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.08480630711414787, expected_batch_size: 99 / 3960
Round=0, perf=[340, 437, 79, 0, 78, 427, 79, 366, 374, 0], mean perf=2180/20016 (0.1089%)
Round=1, perf=[61, 183, 2, 52, 197, 203, 172, 195, 56, 61], mean perf=1182/20016 (0.0591%)
Round=2, perf=[191, 302, 284, 180, 297, 489, 290, 11, 196, 98], mean perf=2338/20016 (0.1168%)
Round=3, perf=[255, 270, 254, 644, 649, 31, 440, 409, 0, 413], mean perf=3365/20016 (0.1681%)
Round=4, perf=[258, 360, 311, 719, 660, 269, 497, 483, 117, 467], mean perf=4141/20016 (0.2069%)
Round=5, perf=[365, 660, 660, 731, 1081, 282, 760, 508, 110, 342], mean perf=5499/20016 (0.2747%)
Round=6, perf=[82, 72, 490, 679, 298, 411, 259, 250, 362, 605], mean perf=3508/20016 (0.1753%)
Round=7, perf=[388, 350, 522, 748, 585, 151, 574, 408, 166, 685], mean perf=4577/20016 (0.2287%)
Round=8, perf=[549, 613, 692, 709, 669, 315, 758, 527, 281, 772], mean perf=5885/20016 (0.2940%)
Round=9, perf=[593, 725, 929, 841, 1140, 305, 920, 777, 338, 597], mean perf=7165/20016 (0.3580%)
Round=10, perf=[687, 599, 1085, 1195, 808, 443, 737, 607, 576, 1013], mean perf=7750/20016 (0.3872%)
Round=11, perf=[734, 828, 1113, 971, 905, 432, 894, 578, 417, 914], mean perf=7786/20016 (0.3890%)
Round=12, perf=[969, 803, 1040, 1250, 1082, 401, 944, 984, 665, 1055], mean perf=9193/20016 (0.4593%)
Round=13, perf=[689, 882, 1209, 1085, 917, 588, 972, 474, 385, 1016], mean perf=8217/20016 (0.4105%)
Round=14, perf=[920, 873, 1416, 1303, 1322, 653, 1166, 1005, 874, 1102], mean perf=10634/20016 (0.5313%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.4670
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[372, 412, 1, 2, 7, 389, 7, 382, 389, 0], mean perf=1961/20016 (0.0980%)
Round=1, perf=[3, 235, 189, 267, 508, 246, 528, 319, 2, 281], mean perf=2578/20016 (0.1288%)
Round=2, perf=[152, 552, 527, 171, 583, 387, 443, 110, 62, 0], mean perf=2987/20016 (0.1492%)
Round=3, perf=[411, 477, 639, 81, 336, 110, 574, 213, 215, 359], mean perf=3415/20016 (0.1706%)
Round=4, perf=[481, 353, 454, 290, 325, 149, 395, 457, 411, 427], mean perf=3742/20016 (0.1870%)
Round=5, perf=[286, 596, 695, 455, 867, 498, 737, 595, 389, 337], mean perf=5455/20016 (0.2725%)
Round=6, perf=[159, 217, 587, 687, 422, 538, 394, 350, 506, 598], mean perf=4458/20016 (0.2227%)
Round=7, perf=[482, 460, 453, 860, 815, 145, 452, 525, 144, 461], mean perf=4797/20016 (0.2397%)
Round=8, perf=[271, 410, 493, 242, 677, 365, 530, 748, 574, 141], mean perf=4451/20016 (0.2224%)
Round=9, perf=[455, 524, 632, 640, 717, 560, 571, 889, 725, 492], mean perf=6205/20016 (0.3100%)
Round=10, perf=[510, 655, 688, 414, 717, 600, 598, 661, 653, 322], mean perf=5818/20016 (0.2907%)
Round=11, perf=[551, 910, 810, 574, 891, 513, 672, 458, 266, 315], mean perf=5960/20016 (0.2978%)
Round=12, perf=[848, 919, 798, 839, 741, 530, 715, 693, 523, 777], mean perf=7383/20016 (0.3689%)
Round=13, perf=[867, 722, 817, 951, 813, 582, 811, 731, 588, 764], mean perf=7646/20016 (0.3820%)
Round=14, perf=[582, 803, 602, 846, 1112, 632, 816, 995, 547, 521], mean perf=7456/20016 (0.3725%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.3745
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.021965964339383415 / 0.6935340371071386, expected_batch_size: 636 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[582, 647, 187, 177, 210, 437, 35, 419, 406, 3], mean perf=3103/20016 (0.1550%)
Round=3, perf=[766, 1181, 593, 590, 876, 910, 554, 819, 521, 221], mean perf=7031/20016 (0.3513%)
Round=4, perf=[823, 1288, 1027, 968, 1460, 1131, 1039, 1291, 892, 562], mean perf=10481/20016 (0.5236%)
Round=5, perf=[749, 1096, 1328, 1125, 1451, 962, 1083, 1164, 942, 783], mean perf=10683/20016 (0.5337%)
Round=6, perf=[797, 1274, 1110, 1003, 1459, 1011, 1149, 1104, 670, 709], mean perf=10286/20016 (0.5139%)
Round=7, perf=[985, 1155, 1482, 1233, 1419, 870, 1227, 1141, 995, 1112], mean perf=11619/20016 (0.5805%)
Round=8, perf=[948, 1335, 1403, 1163, 1634, 1048, 1365, 1286, 938, 948], mean perf=12068/20016 (0.6029%)
Round=9, perf=[1042, 1399, 1465, 1196, 1523, 1022, 1345, 1289, 951, 1105], mean perf=12337/20016 (0.6164%)
Round=10, perf=[1206, 1451, 1487, 1325, 1578, 1129, 1395, 1490, 1187, 1195], mean perf=13443/20016 (0.6716%)
Round=11, perf=[1122, 1464, 1541, 1280, 1568, 1224, 1375, 1380, 1179, 1065], mean perf=13198/20016 (0.6594%)
Round=12, perf=[1330, 1536, 1541, 1430, 1631, 1324, 1436, 1573, 1355, 1248], mean perf=14404/20016 (0.7196%)
Round=13, perf=[1303, 1533, 1460, 1386, 1619, 1290, 1401, 1610, 1338, 1214], mean perf=14154/20016 (0.7071%)
Round=14, perf=[1317, 1479, 1562, 1443, 1565, 1304, 1402, 1502, 1336, 1289], mean perf=14199/20016 (0.7094%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.3502, delta=0.0001, Perf=0.7120, seed=44
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17920449351331524, expected_batch_size: 135 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[541, 345, 0, 216, 0, 539, 0, 343, 591, 132], mean perf=2707/20016 (0.1352%)
Round=2, perf=[414, 216, 54, 192, 2, 264, 0, 379, 440, 226], mean perf=2187/20016 (0.1093%)
Round=3, perf=[477, 643, 473, 98, 260, 220, 584, 202, 51, 443], mean perf=3451/20016 (0.1724%)
Round=4, perf=[656, 345, 630, 629, 427, 102, 264, 551, 630, 529], mean perf=4763/20016 (0.2380%)
Round=5, perf=[491, 655, 679, 836, 1043, 354, 842, 702, 283, 603], mean perf=6488/20016 (0.3241%)
Round=6, perf=[779, 920, 745, 694, 803, 353, 877, 661, 259, 704], mean perf=6795/20016 (0.3395%)
Round=7, perf=[681, 869, 906, 886, 1323, 363, 1023, 1030, 453, 603], mean perf=8137/20016 (0.4065%)
Round=8, perf=[438, 893, 821, 818, 1356, 513, 997, 785, 217, 428], mean perf=7266/20016 (0.3630%)
Round=9, perf=[607, 1070, 900, 837, 1188, 631, 1010, 657, 218, 580], mean perf=7698/20016 (0.3846%)
Round=10, perf=[1019, 1108, 1121, 1196, 1311, 734, 1202, 1314, 862, 1076], mean perf=10943/20016 (0.5467%)
Round=11, perf=[1078, 1231, 1203, 891, 1161, 540, 1152, 1119, 731, 845], mean perf=9951/20016 (0.4972%)
Round=12, perf=[774, 1328, 1404, 1091, 1588, 1102, 1373, 1248, 883, 907], mean perf=11698/20016 (0.5844%)
Round=13, perf=[811, 1362, 1337, 1060, 1591, 1151, 1272, 1316, 968, 784], mean perf=11652/20016 (0.5821%)
Round=14, perf=[1073, 1178, 1103, 1348, 1356, 975, 1082, 1259, 938, 1087], mean perf=11399/20016 (0.5695%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5787
