Project Path:  /data/privacyGroup/liujunxu/Fed-rPDP
noise_multiplier :  12.373046875
Round=0, perf=[1378, 1095, 386, 1289, 945, 1102, 726, 1309, 1047, 858], mean perf=10135/20016 (0.5063%)
Round=1, perf=[1830, 1701, 1535, 1712, 1674, 1557, 1548, 1808, 1667, 1418], mean perf=16450/20016 (0.8218%)
Round=2, perf=[1736, 1789, 1700, 1645, 1748, 1636, 1663, 1759, 1620, 1412], mean perf=16708/20016 (0.8347%)
Round=3, perf=[1838, 1888, 1897, 1831, 1850, 1855, 1718, 1845, 1823, 1556], mean perf=18101/20016 (0.9043%)
Round=4, perf=[1928, 1911, 1923, 1922, 1850, 1894, 1743, 1887, 1907, 1647], mean perf=18612/20016 (0.9299%)
Round=5, perf=[1951, 1930, 1930, 1946, 1857, 1912, 1765, 1906, 1924, 1666], mean perf=18787/20016 (0.9386%)
Round=6, perf=[1954, 1941, 1954, 1962, 1883, 1940, 1781, 1920, 1939, 1674], mean perf=18948/20016 (0.9466%)
Round=7, perf=[1957, 1941, 1953, 1971, 1888, 1936, 1787, 1933, 1939, 1671], mean perf=18976/20016 (0.9480%)
Round=8, perf=[1965, 1962, 1968, 1971, 1904, 1945, 1796, 1924, 1940, 1679], mean perf=19054/20016 (0.9519%)
Round=9, perf=[1971, 1972, 1974, 1968, 1898, 1953, 1794, 1923, 1942, 1687], mean perf=19082/20016 (0.9533%)
Round=10, perf=[1969, 1972, 1982, 1978, 1906, 1953, 1801, 1921, 1945, 1693], mean perf=19120/20016 (0.9552%)
Round=11, perf=[1984, 1978, 1985, 1974, 1905, 1959, 1802, 1935, 1951, 1696], mean perf=19169/20016 (0.9577%)
Round=12, perf=[1989, 1973, 1974, 1983, 1910, 1961, 1802, 1941, 1951, 1693], mean perf=19177/20016 (0.9581%)
Round=13, perf=[1987, 1976, 1986, 1987, 1908, 1966, 1808, 1940, 1955, 1699], mean perf=19212/20016 (0.9598%)
Round=14, perf=[1977, 1976, 1993, 1988, 1909, 1971, 1810, 1933, 1954, 1702], mean perf=19213/20016 (0.9599%)
Mean performance without rPDP, Mean Perf=0.9593
../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the largest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
r2 score of the curve fitting. 0.9998451794812138
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[472, 428, 0, 94, 11, 387, 18, 506, 497, 129], mean perf=2542/20016 (0.1270%)
Round=1, perf=[108, 389, 56, 95, 386, 394, 380, 434, 105, 103], mean perf=2450/20016 (0.1224%)
Round=2, perf=[87, 330, 413, 2, 469, 266, 500, 317, 210, 84], mean perf=2678/20016 (0.1338%)
Round=3, perf=[248, 476, 249, 60, 261, 260, 431, 239, 38, 187], mean perf=2449/20016 (0.1224%)
Round=4, perf=[556, 213, 515, 447, 430, 72, 315, 569, 595, 384], mean perf=4096/20016 (0.2046%)
Round=5, perf=[680, 503, 409, 559, 310, 285, 256, 462, 393, 504], mean perf=4361/20016 (0.2179%)
Round=6, perf=[566, 574, 598, 548, 685, 383, 497, 586, 447, 314], mean perf=5198/20016 (0.2597%)
Round=7, perf=[733, 628, 875, 665, 315, 366, 363, 176, 406, 657], mean perf=5184/20016 (0.2590%)
Round=8, perf=[577, 252, 399, 820, 633, 104, 446, 748, 487, 650], mean perf=5116/20016 (0.2556%)
Round=9, perf=[722, 481, 620, 875, 499, 263, 658, 582, 436, 1001], mean perf=6137/20016 (0.3066%)
Round=10, perf=[575, 294, 270, 681, 519, 482, 501, 649, 655, 551], mean perf=5177/20016 (0.2586%)
Round=11, perf=[324, 616, 862, 302, 859, 454, 642, 505, 427, 67], mean perf=5058/20016 (0.2527%)
Round=12, perf=[549, 483, 835, 645, 937, 344, 815, 677, 525, 504], mean perf=6314/20016 (0.3154%)
Round=13, perf=[807, 998, 1102, 857, 1063, 491, 1162, 902, 552, 898], mean perf=8832/20016 (0.4412%)
Round=14, perf=[766, 627, 759, 1059, 814, 625, 824, 927, 710, 1063], mean perf=8174/20016 (0.4084%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.3883
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.021965964339383415 / 0.5678197400135198, expected_batch_size: 653 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[709, 730, 552, 580, 454, 587, 188, 559, 608, 292], mean perf=5259/20016 (0.2627%)
Round=3, perf=[511, 642, 1044, 690, 560, 683, 359, 350, 668, 491], mean perf=5998/20016 (0.2997%)
Round=4, perf=[937, 908, 1306, 1200, 1097, 766, 793, 1013, 1072, 953], mean perf=10045/20016 (0.5018%)
Round=5, perf=[748, 942, 1333, 1156, 1378, 864, 1024, 1004, 931, 848], mean perf=10228/20016 (0.5110%)
Round=6, perf=[893, 1144, 1317, 1259, 1512, 1203, 1161, 1200, 1111, 834], mean perf=11634/20016 (0.5812%)
Round=7, perf=[1173, 1280, 1485, 1334, 1496, 1000, 1305, 1373, 1179, 1191], mean perf=12816/20016 (0.6403%)
Round=8, perf=[1052, 1363, 1480, 1179, 1528, 1076, 1299, 1339, 1106, 995], mean perf=12417/20016 (0.6204%)
Round=9, perf=[1092, 1261, 1476, 1336, 1526, 1035, 1314, 1315, 1105, 1196], mean perf=12656/20016 (0.6323%)
Round=10, perf=[1085, 1330, 1463, 1323, 1616, 1091, 1367, 1485, 1189, 1152], mean perf=13101/20016 (0.6545%)
Round=11, perf=[1294, 1452, 1452, 1426, 1606, 1287, 1376, 1483, 1280, 1179], mean perf=13835/20016 (0.6912%)
Round=12, perf=[1263, 1381, 1389, 1412, 1555, 1175, 1298, 1540, 1274, 1244], mean perf=13531/20016 (0.6760%)
Round=13, perf=[1349, 1511, 1510, 1435, 1593, 1362, 1372, 1565, 1365, 1238], mean perf=14300/20016 (0.7144%)
Round=14, perf=[1330, 1451, 1463, 1412, 1545, 1312, 1340, 1569, 1358, 1228], mean perf=14008/20016 (0.6998%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.0001, Perf=0.6967, seed=46
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17742571183510908, expected_batch_size: 140 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[485, 532, 210, 0, 2, 269, 192, 294, 312, 209], mean perf=2505/20016 (0.1251%)
Round=2, perf=[402, 481, 127, 61, 123, 454, 97, 400, 417, 52], mean perf=2614/20016 (0.1306%)
Round=3, perf=[522, 379, 516, 674, 380, 145, 67, 170, 263, 315], mean perf=3431/20016 (0.1714%)
Round=4, perf=[225, 196, 601, 173, 591, 0, 394, 425, 385, 39], mean perf=3029/20016 (0.1513%)
Round=5, perf=[695, 377, 358, 966, 670, 93, 385, 719, 383, 668], mean perf=5314/20016 (0.2655%)
Round=6, perf=[363, 125, 410, 628, 101, 402, 73, 336, 606, 612], mean perf=3656/20016 (0.1827%)
Round=7, perf=[383, 298, 441, 556, 836, 234, 774, 1157, 774, 536], mean perf=5989/20016 (0.2992%)
Round=8, perf=[351, 639, 734, 782, 1214, 320, 813, 613, 156, 405], mean perf=6027/20016 (0.3011%)
Round=9, perf=[319, 692, 597, 744, 1087, 386, 789, 547, 41, 420], mean perf=5622/20016 (0.2809%)
Round=10, perf=[726, 635, 706, 943, 790, 141, 700, 591, 227, 842], mean perf=6301/20016 (0.3148%)
Round=11, perf=[261, 366, 939, 884, 1017, 496, 777, 822, 668, 710], mean perf=6940/20016 (0.3467%)
Round=12, perf=[616, 1068, 852, 913, 1504, 717, 1073, 1158, 492, 485], mean perf=8878/20016 (0.4435%)
Round=13, perf=[856, 1090, 915, 1213, 1461, 892, 1072, 1455, 898, 885], mean perf=10737/20016 (0.5364%)
Round=14, perf=[707, 834, 976, 1108, 1488, 543, 1090, 1352, 770, 742], mean perf=9610/20016 (0.4801%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.4867
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021966323859084147 / 0.021966323859084147, expected_batch_size: 86 / 3960
Round=0, perf=[381, 431, 0, 0, 3, 396, 2, 397, 402, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[15, 412, 391, 13, 366, 381, 400, 21, 20, 26], mean perf=2045/20016 (0.1022%)
Round=2, perf=[242, 533, 146, 195, 427, 402, 430, 440, 99, 147], mean perf=3061/20016 (0.1529%)
Round=3, perf=[379, 425, 666, 106, 323, 104, 523, 259, 291, 408], mean perf=3484/20016 (0.1741%)
Round=4, perf=[191, 320, 209, 416, 653, 237, 665, 682, 209, 478], mean perf=4060/20016 (0.2028%)
Round=5, perf=[351, 337, 219, 329, 513, 341, 481, 743, 487, 360], mean perf=4161/20016 (0.2079%)
Round=6, perf=[216, 562, 762, 189, 750, 346, 590, 270, 231, 53], mean perf=3969/20016 (0.1983%)
Round=7, perf=[159, 658, 628, 222, 565, 726, 678, 342, 233, 370], mean perf=4581/20016 (0.2289%)
Round=8, perf=[147, 391, 415, 403, 896, 342, 866, 870, 372, 427], mean perf=5129/20016 (0.2562%)
Round=9, perf=[186, 241, 653, 595, 788, 311, 728, 711, 474, 576], mean perf=5263/20016 (0.2629%)
Round=10, perf=[428, 337, 674, 778, 816, 214, 758, 775, 439, 782], mean perf=6001/20016 (0.2998%)
Round=11, perf=[728, 738, 1017, 995, 983, 316, 839, 657, 397, 898], mean perf=7568/20016 (0.3781%)
Round=12, perf=[584, 738, 1043, 547, 890, 319, 969, 687, 406, 632], mean perf=6815/20016 (0.3405%)
Round=13, perf=[871, 717, 946, 871, 1029, 305, 718, 991, 808, 602], mean perf=7858/20016 (0.3926%)
Round=14, perf=[615, 933, 1004, 997, 1101, 716, 899, 744, 463, 736], mean perf=8208/20016 (0.4101%)
Mean performance of StrongForAll, eps=[array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])
 array([0.10000277, 0.10000277, 0.10000277, ..., 0.10000277, 0.10000277,
        0.10000277])                                                    ], delta=0.0001, Perf=0.3811
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.021967535696375492 / 1.0, expected_batch_size: 328 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[491, 548, 81, 501, 486, 427, 421, 817, 395, 388], mean perf=4555/20016 (0.2276%)
Round=2, perf=[584, 633, 392, 415, 385, 213, 4, 207, 206, 0], mean perf=3039/20016 (0.1518%)
Round=3, perf=[513, 902, 540, 425, 787, 430, 474, 322, 10, 103], mean perf=4506/20016 (0.2251%)
Round=4, perf=[613, 768, 891, 794, 879, 347, 648, 491, 274, 578], mean perf=6283/20016 (0.3139%)
Round=5, perf=[790, 846, 1230, 854, 1045, 249, 1004, 732, 496, 816], mean perf=8062/20016 (0.4028%)
Round=6, perf=[765, 1051, 1471, 1062, 1361, 781, 1277, 1074, 786, 1035], mean perf=10663/20016 (0.5327%)
Round=7, perf=[933, 1134, 1451, 1089, 1331, 759, 1195, 1143, 896, 1017], mean perf=10948/20016 (0.5470%)
Round=8, perf=[886, 1192, 1501, 1155, 1537, 814, 1367, 1194, 826, 1060], mean perf=11532/20016 (0.5761%)
Round=9, perf=[1234, 1336, 1523, 1327, 1454, 1018, 1316, 1497, 1218, 1256], mean perf=13179/20016 (0.6584%)
Round=10, perf=[1225, 1248, 1325, 1267, 1388, 908, 1218, 1508, 1181, 1181], mean perf=12449/20016 (0.6220%)
Round=11, perf=[1130, 1273, 1500, 1332, 1505, 1075, 1226, 1424, 1278, 1117], mean perf=12860/20016 (0.6425%)
Round=12, perf=[1221, 1435, 1368, 1369, 1645, 1311, 1319, 1608, 1275, 1071], mean perf=13622/20016 (0.6806%)
Round=13, perf=[1350, 1424, 1343, 1396, 1580, 1136, 1361, 1720, 1330, 1210], mean perf=13850/20016 (0.6919%)
Round=14, perf=[1232, 1467, 1435, 1283, 1524, 1157, 1390, 1575, 1217, 1206], mean perf=13486/20016 (0.6738%)
Mean performance of BoundedPareto, min_eps=0.1000, max_eps=10.0000, delta=0.0001, Perf=0.6821, seed=46
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.0850835674335664, expected_batch_size: 100 / 3960
Round=0, perf=[31, 422, 0, 0, 354, 426, 367, 378, 30, 0], mean perf=2008/20016 (0.1003%)
Round=1, perf=[25, 410, 15, 22, 372, 396, 378, 331, 2, 5], mean perf=1956/20016 (0.0977%)
Round=2, perf=[379, 8, 8, 361, 8, 385, 15, 12, 403, 174], mean perf=1753/20016 (0.0876%)
Round=3, perf=[0, 397, 47, 18, 408, 426, 403, 368, 41, 13], mean perf=2121/20016 (0.1060%)
Round=4, perf=[0, 13, 411, 0, 444, 11, 367, 416, 379, 0], mean perf=2041/20016 (0.1020%)
Round=5, perf=[170, 487, 144, 0, 428, 448, 420, 517, 324, 2], mean perf=2940/20016 (0.1469%)
Round=6, perf=[253, 683, 375, 94, 513, 648, 563, 441, 360, 117], mean perf=4047/20016 (0.2022%)
Round=7, perf=[374, 627, 421, 10, 344, 373, 587, 337, 170, 312], mean perf=3555/20016 (0.1776%)
Round=8, perf=[595, 415, 27, 601, 400, 708, 367, 629, 629, 405], mean perf=4776/20016 (0.2386%)
Round=9, perf=[376, 1011, 421, 478, 1020, 862, 995, 891, 278, 387], mean perf=6719/20016 (0.3357%)
Round=10, perf=[712, 894, 706, 768, 1195, 690, 985, 1371, 916, 629], mean perf=8866/20016 (0.4429%)
Round=11, perf=[558, 906, 692, 628, 1093, 737, 941, 1072, 670, 531], mean perf=7828/20016 (0.3911%)
Round=12, perf=[687, 1024, 822, 834, 1155, 774, 940, 1057, 673, 641], mean perf=8607/20016 (0.4300%)
Round=13, perf=[729, 667, 583, 900, 822, 857, 686, 993, 918, 753], mean perf=7908/20016 (0.3951%)
Round=14, perf=[956, 1413, 1157, 928, 1468, 912, 1278, 1285, 752, 798], mean perf=10947/20016 (0.5469%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.4573
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[357, 192, 19, 309, 183, 228, 176, 464, 343, 347], mean perf=2618/20016 (0.1308%)
Round=1, perf=[285, 400, 394, 68, 304, 185, 536, 268, 147, 331], mean perf=2918/20016 (0.1458%)
Round=2, perf=[193, 416, 387, 262, 395, 328, 586, 298, 112, 409], mean perf=3386/20016 (0.1692%)
Round=3, perf=[344, 415, 272, 204, 30, 485, 130, 273, 433, 314], mean perf=2900/20016 (0.1449%)
Round=4, perf=[119, 66, 119, 598, 449, 219, 441, 423, 217, 523], mean perf=3174/20016 (0.1586%)
Round=5, perf=[147, 193, 386, 425, 741, 195, 623, 732, 385, 355], mean perf=4182/20016 (0.2089%)
Round=6, perf=[521, 629, 676, 793, 902, 512, 609, 802, 605, 476], mean perf=6525/20016 (0.3260%)
Round=7, perf=[673, 924, 769, 821, 914, 705, 612, 766, 567, 457], mean perf=7208/20016 (0.3601%)
Round=8, perf=[558, 727, 673, 993, 885, 561, 602, 665, 412, 672], mean perf=6748/20016 (0.3371%)
Round=9, perf=[437, 778, 879, 751, 1244, 529, 870, 738, 318, 397], mean perf=6941/20016 (0.3468%)
Round=10, perf=[694, 1207, 905, 588, 1131, 885, 920, 764, 416, 335], mean perf=7845/20016 (0.3919%)
Round=11, perf=[849, 933, 1003, 661, 789, 238, 841, 374, 199, 627], mean perf=6514/20016 (0.3254%)
Round=12, perf=[819, 941, 1010, 983, 888, 542, 896, 482, 288, 858], mean perf=7707/20016 (0.3850%)
Round=13, perf=[686, 850, 915, 949, 1190, 433, 985, 928, 472, 708], mean perf=8116/20016 (0.4055%)
Round=14, perf=[824, 1005, 1106, 845, 1172, 433, 1173, 762, 364, 728], mean perf=8412/20016 (0.4203%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.4036
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.021965964339383415 / 0.7059465719588536, expected_batch_size: 657 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[711, 935, 343, 340, 496, 571, 176, 543, 398, 1], mean perf=4514/20016 (0.2255%)
Round=3, perf=[659, 1177, 873, 751, 1225, 910, 864, 844, 447, 432], mean perf=8182/20016 (0.4088%)
Round=4, perf=[847, 1192, 1207, 763, 1112, 1062, 733, 876, 907, 463], mean perf=9162/20016 (0.4577%)
Round=5, perf=[730, 924, 1288, 1056, 1330, 578, 1064, 880, 611, 862], mean perf=9323/20016 (0.4658%)
Round=6, perf=[725, 1110, 1448, 1048, 1497, 720, 1320, 1031, 609, 955], mean perf=10463/20016 (0.5227%)
Round=7, perf=[1134, 1303, 1306, 1269, 1502, 940, 1310, 1396, 997, 1134], mean perf=12291/20016 (0.6141%)
Round=8, perf=[1048, 1219, 1269, 1256, 1386, 909, 1202, 1103, 803, 1111], mean perf=11306/20016 (0.5648%)
Round=9, perf=[896, 1163, 1460, 1167, 1543, 743, 1355, 1231, 756, 1065], mean perf=11379/20016 (0.5685%)
Round=10, perf=[1214, 1368, 1402, 1294, 1560, 1007, 1341, 1522, 1142, 1137], mean perf=12987/20016 (0.6488%)
Round=11, perf=[1287, 1357, 1454, 1408, 1519, 1159, 1319, 1502, 1316, 1212], mean perf=13533/20016 (0.6761%)
Round=12, perf=[1173, 1376, 1420, 1318, 1577, 1085, 1332, 1527, 1185, 1118], mean perf=13111/20016 (0.6550%)
Round=13, perf=[1181, 1414, 1366, 1274, 1587, 1133, 1311, 1596, 1177, 1115], mean perf=13154/20016 (0.6572%)
Round=14, perf=[1171, 1434, 1495, 1272, 1573, 1100, 1374, 1461, 1127, 1158], mean perf=13165/20016 (0.6577%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.4886, delta=0.0001, Perf=0.6566, seed=46
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17837875190583463, expected_batch_size: 139 / 3960
Round=0, perf=[73, 393, 0, 93, 420, 409, 447, 452, 52, 121], mean perf=2460/20016 (0.1229%)
Round=1, perf=[35, 442, 390, 0, 378, 428, 420, 31, 31, 1], mean perf=2156/20016 (0.1077%)
Round=2, perf=[311, 690, 306, 307, 643, 410, 388, 341, 3, 3], mean perf=3402/20016 (0.1700%)
Round=3, perf=[343, 1008, 666, 367, 913, 645, 643, 298, 3, 8], mean perf=4894/20016 (0.2445%)
Round=4, perf=[343, 181, 701, 752, 441, 410, 312, 442, 597, 613], mean perf=4792/20016 (0.2394%)
Round=5, perf=[647, 575, 929, 946, 1186, 213, 758, 914, 615, 542], mean perf=7325/20016 (0.3660%)
Round=6, perf=[430, 794, 873, 618, 1016, 358, 854, 364, 91, 388], mean perf=5786/20016 (0.2891%)
Round=7, perf=[977, 745, 1192, 984, 920, 322, 1074, 1088, 859, 1167], mean perf=9328/20016 (0.4660%)
Round=8, perf=[1135, 1043, 1000, 887, 1115, 495, 949, 1104, 841, 709], mean perf=9278/20016 (0.4635%)
Round=9, perf=[1112, 968, 1221, 1166, 1228, 744, 1027, 1026, 1021, 834], mean perf=10347/20016 (0.5169%)
Round=10, perf=[799, 1080, 912, 964, 1336, 642, 993, 1045, 609, 609], mean perf=8989/20016 (0.4491%)
Round=11, perf=[958, 993, 1308, 1194, 1210, 870, 1028, 1300, 1167, 1037], mean perf=11065/20016 (0.5528%)
Round=12, perf=[1203, 1328, 1478, 1324, 1407, 1069, 1306, 1470, 1270, 1183], mean perf=13038/20016 (0.6514%)
Round=13, perf=[1004, 1090, 1172, 1248, 1422, 1063, 1094, 1532, 1271, 909], mean perf=11805/20016 (0.5898%)
Round=14, perf=[1187, 971, 1221, 1548, 1359, 1100, 1077, 1606, 1524, 1229], mean perf=12822/20016 (0.6406%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.6273
