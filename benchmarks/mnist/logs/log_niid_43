Project Path:  /data/privacyGroup/liujunxu/Fed-rPDP
noise_multiplier :  12.373046875
Round=0, perf=[830, 952, 552, 783, 1131, 801, 808, 1221, 786, 429], mean perf=8293/20016 (0.4143%)
Round=1, perf=[1755, 1716, 1639, 1681, 1671, 1565, 1565, 1720, 1632, 1451], mean perf=16395/20016 (0.8191%)
Round=2, perf=[1812, 1645, 1657, 1877, 1656, 1713, 1524, 1869, 1859, 1537], mean perf=17149/20016 (0.8568%)
Round=3, perf=[1879, 1862, 1886, 1889, 1817, 1851, 1707, 1868, 1874, 1615], mean perf=18248/20016 (0.9117%)
Round=4, perf=[1917, 1888, 1913, 1919, 1831, 1887, 1728, 1884, 1905, 1633], mean perf=18505/20016 (0.9245%)
Round=5, perf=[1930, 1922, 1937, 1939, 1875, 1931, 1758, 1902, 1926, 1661], mean perf=18781/20016 (0.9383%)
Round=6, perf=[1941, 1938, 1953, 1952, 1892, 1934, 1776, 1918, 1933, 1668], mean perf=18905/20016 (0.9445%)
Round=7, perf=[1948, 1937, 1960, 1978, 1889, 1941, 1782, 1922, 1939, 1680], mean perf=18976/20016 (0.9480%)
Round=8, perf=[1955, 1944, 1968, 1979, 1899, 1945, 1793, 1922, 1938, 1680], mean perf=19023/20016 (0.9504%)
Round=9, perf=[1967, 1951, 1962, 1980, 1896, 1941, 1797, 1929, 1942, 1695], mean perf=19060/20016 (0.9522%)
Round=10, perf=[1966, 1968, 1971, 1984, 1904, 1946, 1795, 1930, 1950, 1692], mean perf=19106/20016 (0.9545%)
Round=11, perf=[1973, 1970, 1980, 1982, 1910, 1952, 1801, 1933, 1952, 1698], mean perf=19151/20016 (0.9568%)
Round=12, perf=[1986, 1959, 1976, 1987, 1887, 1953, 1790, 1934, 1956, 1702], mean perf=19130/20016 (0.9557%)
Round=13, perf=[1986, 1976, 1987, 1989, 1913, 1969, 1805, 1939, 1955, 1698], mean perf=19217/20016 (0.9601%)
Round=14, perf=[1990, 1984, 1987, 1993, 1914, 1975, 1805, 1939, 1965, 1700], mean perf=19252/20016 (0.9618%)
Mean performance without rPDP, Mean Perf=0.9592
../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the largest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
r2 score of the curve fitting. 0.9998451794812138
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[0, 2, 255, 626, 458, 237, 429, 432, 220, 587], mean perf=3246/20016 (0.1622%)
Round=2, perf=[2, 6, 398, 578, 248, 375, 268, 261, 336, 587], mean perf=3059/20016 (0.1528%)
Round=3, perf=[431, 466, 595, 406, 631, 145, 193, 250, 246, 16], mean perf=3379/20016 (0.1688%)
Round=4, perf=[367, 364, 716, 391, 727, 3, 293, 363, 326, 1], mean perf=3551/20016 (0.1774%)
Round=5, perf=[404, 403, 846, 645, 494, 285, 175, 149, 398, 315], mean perf=4114/20016 (0.2055%)
Round=6, perf=[517, 486, 849, 561, 647, 560, 499, 716, 879, 400], mean perf=6114/20016 (0.3055%)
Round=7, perf=[600, 883, 521, 854, 1034, 528, 718, 802, 243, 479], mean perf=6662/20016 (0.3328%)
Round=8, perf=[488, 496, 617, 847, 720, 282, 380, 312, 210, 448], mean perf=4800/20016 (0.2398%)
Round=9, perf=[389, 810, 341, 585, 1026, 753, 942, 1093, 410, 511], mean perf=6860/20016 (0.3427%)
Round=10, perf=[752, 1025, 753, 1001, 990, 865, 664, 931, 650, 610], mean perf=8241/20016 (0.4117%)
Round=11, perf=[664, 1025, 880, 952, 1235, 794, 826, 914, 548, 566], mean perf=8404/20016 (0.4199%)
Round=12, perf=[665, 1139, 1023, 935, 1397, 952, 1059, 1177, 727, 653], mean perf=9727/20016 (0.4860%)
Round=13, perf=[698, 1225, 925, 964, 1294, 1103, 975, 1048, 652, 598], mean perf=9482/20016 (0.4737%)
Round=14, perf=[762, 975, 963, 732, 1196, 641, 1131, 1135, 806, 637], mean perf=8978/20016 (0.4485%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.4694
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.021965964339383415 / 0.5678197400135198, expected_batch_size: 653 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[672, 755, 279, 263, 320, 446, 54, 432, 403, 0], mean perf=3624/20016 (0.1811%)
Round=3, perf=[772, 1079, 617, 491, 636, 759, 289, 574, 498, 120], mean perf=5835/20016 (0.2915%)
Round=4, perf=[841, 1184, 879, 808, 1233, 866, 925, 1234, 770, 526], mean perf=9266/20016 (0.4629%)
Round=5, perf=[692, 1101, 1027, 1003, 1232, 946, 989, 827, 504, 728], mean perf=9049/20016 (0.4521%)
Round=6, perf=[839, 1276, 1249, 1045, 1407, 880, 1227, 1098, 619, 919], mean perf=10559/20016 (0.5275%)
Round=7, perf=[908, 1266, 1362, 1181, 1511, 1120, 1239, 1215, 926, 954], mean perf=11682/20016 (0.5836%)
Round=8, perf=[1037, 1243, 1479, 1252, 1458, 966, 1253, 1214, 1041, 1122], mean perf=12065/20016 (0.6028%)
Round=9, perf=[878, 1200, 1309, 1170, 1533, 913, 1292, 1141, 733, 1007], mean perf=11176/20016 (0.5584%)
Round=10, perf=[1329, 1406, 1427, 1335, 1523, 1119, 1328, 1471, 1266, 1166], mean perf=13370/20016 (0.6680%)
Round=11, perf=[1235, 1451, 1498, 1349, 1582, 1177, 1390, 1516, 1255, 1179], mean perf=13632/20016 (0.6811%)
Round=12, perf=[1276, 1464, 1459, 1363, 1543, 1196, 1347, 1544, 1239, 1227], mean perf=13658/20016 (0.6824%)
Round=13, perf=[1324, 1468, 1469, 1404, 1538, 1232, 1341, 1571, 1320, 1264], mean perf=13931/20016 (0.6960%)
Round=14, perf=[1304, 1487, 1538, 1419, 1547, 1252, 1404, 1543, 1323, 1296], mean perf=14113/20016 (0.7051%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.0001, Perf=0.6945, seed=43
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17742571183510908, expected_batch_size: 140 / 3960
Round=0, perf=[530, 351, 4, 246, 2, 542, 5, 329, 565, 122], mean perf=2696/20016 (0.1347%)
Round=1, perf=[548, 503, 154, 194, 161, 466, 134, 564, 564, 249], mean perf=3537/20016 (0.1767%)
Round=2, perf=[197, 440, 342, 270, 243, 628, 204, 351, 451, 266], mean perf=3392/20016 (0.1695%)
Round=3, perf=[29, 110, 409, 381, 117, 557, 96, 98, 383, 371], mean perf=2551/20016 (0.1274%)
Round=4, perf=[691, 654, 692, 272, 280, 15, 432, 7, 20, 424], mean perf=3487/20016 (0.1742%)
Round=5, perf=[410, 622, 816, 719, 786, 545, 350, 417, 409, 340], mean perf=5414/20016 (0.2705%)
Round=6, perf=[368, 690, 711, 852, 848, 808, 543, 500, 369, 504], mean perf=6193/20016 (0.3094%)
Round=7, perf=[1107, 899, 807, 682, 534, 334, 455, 433, 452, 604], mean perf=6307/20016 (0.3151%)
Round=8, perf=[797, 964, 1277, 715, 951, 644, 659, 679, 788, 521], mean perf=7995/20016 (0.3994%)
Round=9, perf=[752, 944, 779, 1136, 1031, 871, 664, 828, 625, 670], mean perf=8300/20016 (0.4147%)
Round=10, perf=[648, 842, 1201, 1017, 1305, 445, 1050, 902, 520, 846], mean perf=8776/20016 (0.4384%)
Round=11, perf=[894, 1047, 978, 1202, 1330, 1051, 932, 1090, 897, 769], mean perf=10190/20016 (0.5091%)
Round=12, perf=[859, 882, 1062, 1201, 1321, 741, 915, 1125, 903, 779], mean perf=9788/20016 (0.4890%)
Round=13, perf=[1248, 1198, 1231, 1233, 1358, 1008, 1056, 1345, 1191, 970], mean perf=11838/20016 (0.5914%)
Round=14, perf=[1331, 1277, 1312, 1329, 1351, 943, 1182, 1491, 1204, 1192], mean perf=12612/20016 (0.6301%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5702
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.02196645635542021 / 0.02196645635542021, expected_batch_size: 86 / 3960
Round=0, perf=[12, 264, 239, 0, 241, 255, 280, 20, 12, 0], mean perf=1323/20016 (0.0661%)
Round=1, perf=[238, 315, 92, 8, 69, 284, 70, 228, 210, 0], mean perf=1514/20016 (0.0756%)
Round=2, perf=[28, 176, 334, 26, 334, 167, 329, 199, 178, 32], mean perf=1803/20016 (0.0901%)
Round=3, perf=[311, 293, 579, 555, 453, 129, 180, 165, 237, 199], mean perf=3101/20016 (0.1549%)
Round=4, perf=[444, 454, 516, 528, 326, 380, 68, 206, 388, 229], mean perf=3539/20016 (0.1768%)
Round=5, perf=[400, 444, 310, 465, 656, 344, 562, 781, 435, 391], mean perf=4788/20016 (0.2392%)
Round=6, perf=[20, 95, 490, 16, 492, 87, 423, 437, 399, 4], mean perf=2463/20016 (0.1231%)
Round=7, perf=[141, 412, 319, 619, 858, 386, 750, 684, 132, 460], mean perf=4761/20016 (0.2379%)
Round=8, perf=[200, 543, 489, 329, 960, 468, 878, 957, 484, 281], mean perf=5589/20016 (0.2792%)
Round=9, perf=[169, 665, 765, 344, 648, 640, 599, 204, 221, 196], mean perf=4451/20016 (0.2224%)
Round=10, perf=[395, 588, 453, 612, 1025, 520, 961, 1243, 664, 549], mean perf=7010/20016 (0.3502%)
Round=11, perf=[357, 852, 945, 522, 1197, 802, 1050, 954, 658, 367], mean perf=7704/20016 (0.3849%)
Round=12, perf=[425, 636, 737, 733, 1267, 512, 1071, 1249, 706, 614], mean perf=7950/20016 (0.3972%)
Round=13, perf=[440, 996, 756, 749, 1226, 951, 1068, 938, 473, 543], mean perf=8140/20016 (0.4067%)
Round=14, perf=[346, 614, 647, 530, 1100, 526, 1014, 1039, 631, 466], mean perf=6913/20016 (0.3454%)
Mean performance of StrongForAll, eps=[array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])
 array([0.10000379, 0.10000379, 0.10000379, ..., 0.10000379, 0.10000379,
        0.10000379])                                                    ], delta=0.0001, Perf=0.3831
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.021967907245341464 / 1.0, expected_batch_size: 337 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 441, 11, 5, 9, 412, 3, 399, 409, 3], mean perf=2076/20016 (0.1037%)
Round=2, perf=[173, 199, 532, 538, 205, 597, 115, 58, 476, 398], mean perf=3291/20016 (0.1644%)
Round=3, perf=[294, 374, 913, 674, 494, 512, 184, 124, 465, 364], mean perf=4398/20016 (0.2197%)
Round=4, perf=[494, 904, 792, 419, 1008, 702, 641, 871, 600, 123], mean perf=6554/20016 (0.3274%)
Round=5, perf=[771, 986, 1292, 900, 1247, 529, 1058, 953, 713, 769], mean perf=9218/20016 (0.4605%)
Round=6, perf=[810, 1110, 1180, 921, 1364, 762, 1231, 977, 575, 865], mean perf=9795/20016 (0.4894%)
Round=7, perf=[717, 1080, 1169, 481, 1155, 605, 892, 786, 572, 348], mean perf=7805/20016 (0.3899%)
Round=8, perf=[988, 1375, 1278, 1012, 1274, 1074, 1139, 1096, 837, 884], mean perf=10957/20016 (0.5474%)
Round=9, perf=[1086, 1186, 1485, 809, 1055, 889, 971, 995, 1112, 790], mean perf=10378/20016 (0.5185%)
Round=10, perf=[1065, 1174, 1153, 1214, 1377, 978, 1118, 1518, 1163, 1073], mean perf=11833/20016 (0.5912%)
Round=11, perf=[996, 1278, 1236, 1257, 1590, 1165, 1235, 1583, 1196, 896], mean perf=12432/20016 (0.6211%)
Round=12, perf=[960, 1135, 1311, 1354, 1484, 1200, 1211, 1279, 1188, 1009], mean perf=12131/20016 (0.6061%)
Round=13, perf=[1067, 1161, 1473, 1267, 1455, 782, 1257, 1352, 1103, 1127], mean perf=12044/20016 (0.6017%)
Round=14, perf=[1224, 1449, 1575, 1234, 1538, 1076, 1479, 1382, 1102, 1128], mean perf=13187/20016 (0.6588%)
Mean performance of BoundedPareto, min_eps=0.1000, max_eps=10.0000, delta=0.0001, Perf=0.6222, seed=43
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.08443929272289706, expected_batch_size: 105 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[108, 507, 6, 6, 345, 474, 368, 441, 94, 0], mean perf=2349/20016 (0.1174%)
Round=2, perf=[423, 501, 180, 337, 337, 307, 236, 490, 309, 206], mean perf=3326/20016 (0.1662%)
Round=3, perf=[495, 483, 496, 310, 315, 4, 696, 275, 17, 653], mean perf=3744/20016 (0.1871%)
Round=4, perf=[344, 366, 766, 315, 726, 48, 973, 698, 376, 643], mean perf=5255/20016 (0.2625%)
Round=5, perf=[187, 177, 446, 587, 865, 35, 654, 650, 259, 411], mean perf=4271/20016 (0.2134%)
Round=6, perf=[744, 929, 496, 971, 979, 866, 693, 800, 525, 505], mean perf=7508/20016 (0.3751%)
Round=7, perf=[766, 719, 863, 732, 1033, 313, 915, 972, 605, 682], mean perf=7600/20016 (0.3797%)
Round=8, perf=[768, 647, 760, 1042, 1176, 197, 892, 1102, 578, 779], mean perf=7941/20016 (0.3967%)
Round=9, perf=[415, 419, 603, 682, 746, 213, 717, 627, 334, 728], mean perf=5484/20016 (0.2740%)
Round=10, perf=[719, 872, 929, 671, 765, 280, 933, 429, 197, 786], mean perf=6581/20016 (0.3288%)
Round=11, perf=[723, 996, 1101, 1164, 1142, 766, 944, 789, 524, 932], mean perf=9081/20016 (0.4537%)
Round=12, perf=[1033, 859, 1091, 1272, 881, 378, 903, 801, 562, 1251], mean perf=9031/20016 (0.4512%)
Round=13, perf=[950, 997, 1459, 1176, 1113, 562, 1139, 758, 649, 1165], mean perf=9968/20016 (0.4980%)
Round=14, perf=[1065, 1159, 1601, 1250, 1246, 764, 1285, 1055, 929, 1268], mean perf=11622/20016 (0.5806%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5099
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[229, 317, 206, 174, 220, 469, 254, 88, 230, 72], mean perf=2259/20016 (0.1129%)
Round=1, perf=[62, 172, 353, 31, 501, 200, 427, 452, 350, 35], mean perf=2583/20016 (0.1290%)
Round=2, perf=[589, 356, 362, 204, 1, 209, 340, 0, 215, 460], mean perf=2736/20016 (0.1367%)
Round=3, perf=[545, 580, 593, 290, 328, 36, 328, 39, 8, 261], mean perf=3008/20016 (0.1503%)
Round=4, perf=[646, 610, 625, 480, 412, 224, 277, 13, 143, 239], mean perf=3669/20016 (0.1833%)
Round=5, perf=[319, 159, 389, 314, 490, 173, 367, 543, 568, 248], mean perf=3570/20016 (0.1784%)
Round=6, perf=[489, 626, 492, 365, 475, 538, 333, 291, 313, 174], mean perf=4096/20016 (0.2046%)
Round=7, perf=[468, 507, 449, 473, 321, 479, 171, 336, 502, 330], mean perf=4036/20016 (0.2016%)
Round=8, perf=[350, 694, 884, 358, 859, 433, 727, 435, 307, 241], mean perf=5288/20016 (0.2642%)
Round=9, perf=[401, 503, 555, 286, 415, 100, 788, 354, 87, 670], mean perf=4159/20016 (0.2078%)
Round=10, perf=[317, 470, 461, 495, 717, 208, 858, 619, 161, 623], mean perf=4929/20016 (0.2463%)
Round=11, perf=[492, 524, 818, 576, 913, 127, 989, 747, 323, 715], mean perf=6224/20016 (0.3110%)
Round=12, perf=[374, 530, 442, 547, 855, 280, 918, 853, 234, 634], mean perf=5667/20016 (0.2831%)
Round=13, perf=[570, 524, 458, 761, 846, 341, 701, 1027, 610, 613], mean perf=6451/20016 (0.3223%)
Round=14, perf=[742, 672, 765, 863, 910, 130, 810, 625, 257, 763], mean perf=6537/20016 (0.3266%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.3107
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.021965964339383415 / 0.7252954468483285, expected_batch_size: 666 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[383, 439, 0, 0, 9, 404, 2, 405, 404, 0], mean perf=2046/20016 (0.1022%)
Round=2, perf=[626, 815, 877, 657, 491, 785, 183, 299, 604, 300], mean perf=5637/20016 (0.2816%)
Round=3, perf=[612, 843, 745, 417, 534, 815, 305, 550, 740, 260], mean perf=5821/20016 (0.2908%)
Round=4, perf=[657, 648, 1339, 900, 849, 532, 590, 479, 765, 708], mean perf=7467/20016 (0.3731%)
Round=5, perf=[954, 1189, 1539, 1057, 1346, 825, 1185, 1013, 881, 930], mean perf=10919/20016 (0.5455%)
Round=6, perf=[848, 1218, 1443, 1102, 1487, 886, 1279, 1080, 815, 979], mean perf=11137/20016 (0.5564%)
Round=7, perf=[945, 1368, 1361, 1049, 1499, 1033, 1238, 1293, 931, 814], mean perf=11531/20016 (0.5761%)
Round=8, perf=[980, 1313, 1517, 1107, 1448, 922, 1347, 1163, 893, 1063], mean perf=11753/20016 (0.5872%)
Round=9, perf=[964, 1442, 1386, 1035, 1594, 1030, 1353, 1368, 902, 845], mean perf=11919/20016 (0.5955%)
Round=10, perf=[881, 1345, 1364, 1039, 1569, 993, 1295, 1219, 816, 829], mean perf=11350/20016 (0.5670%)
Round=11, perf=[1044, 1432, 1411, 1182, 1622, 1142, 1361, 1484, 1070, 1022], mean perf=12770/20016 (0.6380%)
Round=12, perf=[1142, 1460, 1458, 1225, 1535, 1249, 1369, 1418, 1175, 1037], mean perf=13068/20016 (0.6529%)
Round=13, perf=[1212, 1442, 1465, 1305, 1568, 1116, 1393, 1536, 1201, 1191], mean perf=13429/20016 (0.6709%)
Round=14, perf=[1264, 1512, 1426, 1367, 1581, 1343, 1360, 1502, 1257, 1159], mean perf=13771/20016 (0.6880%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.7063, delta=0.0001, Perf=0.6706, seed=43
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17778044096245782, expected_batch_size: 143 / 3960
Round=0, perf=[393, 429, 0, 11, 12, 394, 16, 422, 404, 19], mean perf=2100/20016 (0.1049%)
Round=1, perf=[84, 168, 143, 358, 486, 143, 526, 373, 35, 407], mean perf=2723/20016 (0.1360%)
Round=2, perf=[312, 321, 536, 188, 492, 301, 366, 658, 729, 99], mean perf=4002/20016 (0.1999%)
Round=3, perf=[227, 220, 691, 701, 378, 414, 505, 334, 396, 805], mean perf=4671/20016 (0.2334%)
Round=4, perf=[745, 749, 916, 516, 336, 143, 396, 0, 140, 545], mean perf=4486/20016 (0.2241%)
Round=5, perf=[333, 475, 654, 834, 952, 318, 663, 536, 237, 542], mean perf=5544/20016 (0.2770%)
Round=6, perf=[575, 933, 793, 754, 888, 830, 1037, 695, 412, 874], mean perf=7791/20016 (0.3892%)
Round=7, perf=[677, 1164, 859, 749, 1226, 805, 1039, 935, 423, 525], mean perf=8402/20016 (0.4198%)
Round=8, perf=[859, 778, 1012, 1108, 1043, 667, 836, 972, 862, 825], mean perf=8962/20016 (0.4477%)
Round=9, perf=[914, 891, 1309, 1153, 1168, 701, 1006, 723, 758, 946], mean perf=9569/20016 (0.4781%)
Round=10, perf=[852, 347, 567, 1158, 652, 556, 427, 539, 718, 754], mean perf=6570/20016 (0.3282%)
Round=11, perf=[631, 561, 1142, 1017, 1166, 257, 943, 861, 607, 819], mean perf=8004/20016 (0.3999%)
Round=12, perf=[859, 1035, 1180, 1131, 1221, 618, 1094, 888, 511, 984], mean perf=9521/20016 (0.4757%)
Round=13, perf=[825, 719, 1397, 1254, 1299, 448, 1076, 1021, 871, 1082], mean perf=9992/20016 (0.4992%)
Round=14, perf=[889, 1243, 1537, 1165, 1519, 954, 1327, 1097, 887, 975], mean perf=11593/20016 (0.5792%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5180
