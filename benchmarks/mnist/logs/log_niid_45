Project Path:  /data/privacyGroup/liujunxu/Fed-rPDP
noise_multiplier :  12.373046875
Round=0, perf=[1375, 1159, 563, 1374, 1141, 1112, 815, 1334, 1063, 850], mean perf=10786/20016 (0.5389%)
Round=1, perf=[1344, 1688, 1727, 1382, 1662, 1343, 1545, 1597, 1260, 1315], mean perf=14863/20016 (0.7426%)
Round=2, perf=[1807, 1783, 1804, 1842, 1772, 1772, 1637, 1844, 1813, 1549], mean perf=17623/20016 (0.8804%)
Round=3, perf=[1417, 1792, 1794, 1453, 1795, 1653, 1663, 1576, 1405, 1231], mean perf=15779/20016 (0.7883%)
Round=4, perf=[1873, 1917, 1927, 1861, 1843, 1895, 1748, 1829, 1852, 1602], mean perf=18347/20016 (0.9166%)
Round=5, perf=[1921, 1935, 1957, 1927, 1869, 1918, 1773, 1889, 1912, 1659], mean perf=18760/20016 (0.9373%)
Round=6, perf=[1946, 1955, 1959, 1948, 1886, 1922, 1783, 1902, 1920, 1677], mean perf=18898/20016 (0.9441%)
Round=7, perf=[1821, 1947, 1957, 1804, 1901, 1930, 1779, 1812, 1787, 1539], mean perf=18277/20016 (0.9131%)
Round=8, perf=[1970, 1962, 1964, 1970, 1899, 1954, 1791, 1919, 1941, 1680], mean perf=19050/20016 (0.9517%)
Round=9, perf=[1975, 1965, 1970, 1976, 1902, 1955, 1796, 1932, 1944, 1689], mean perf=19104/20016 (0.9544%)
Round=10, perf=[1980, 1971, 1976, 1974, 1909, 1957, 1800, 1935, 1954, 1690], mean perf=19146/20016 (0.9565%)
Round=11, perf=[1983, 1978, 1973, 1981, 1908, 1964, 1802, 1939, 1959, 1692], mean perf=19179/20016 (0.9582%)
Round=12, perf=[1994, 1980, 1978, 1986, 1908, 1968, 1802, 1939, 1950, 1697], mean perf=19202/20016 (0.9593%)
Round=13, perf=[1987, 1987, 1988, 1985, 1915, 1978, 1810, 1943, 1962, 1694], mean perf=19249/20016 (0.9617%)
Round=14, perf=[1990, 1981, 1983, 1991, 1909, 1968, 1803, 1937, 1962, 1701], mean perf=19225/20016 (0.9605%)
Mean performance without rPDP, Mean Perf=0.9605
../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the largest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
r2 score of the curve fitting. 0.9998451794812138
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[276, 508, 270, 279, 484, 276, 230, 232, 14, 4], mean perf=2573/20016 (0.1285%)
Round=1, perf=[411, 415, 414, 0, 0, 0, 420, 0, 0, 417], mean perf=2077/20016 (0.1038%)
Round=2, perf=[118, 449, 127, 16, 333, 377, 452, 294, 18, 152], mean perf=2336/20016 (0.1167%)
Round=3, perf=[320, 510, 484, 112, 298, 180, 600, 118, 3, 441], mean perf=3066/20016 (0.1532%)
Round=4, perf=[353, 373, 451, 266, 114, 282, 261, 125, 249, 414], mean perf=2888/20016 (0.1443%)
Round=5, perf=[77, 153, 496, 616, 626, 337, 628, 510, 325, 622], mean perf=4390/20016 (0.2193%)
Round=6, perf=[250, 491, 425, 163, 546, 247, 726, 486, 125, 423], mean perf=3882/20016 (0.1939%)
Round=7, perf=[299, 482, 286, 449, 604, 278, 861, 627, 94, 691], mean perf=4671/20016 (0.2334%)
Round=8, perf=[416, 605, 729, 514, 901, 230, 945, 578, 190, 595], mean perf=5703/20016 (0.2849%)
Round=9, perf=[168, 585, 493, 264, 710, 502, 678, 340, 126, 211], mean perf=4077/20016 (0.2037%)
Round=10, perf=[327, 705, 388, 537, 951, 562, 863, 855, 313, 421], mean perf=5922/20016 (0.2959%)
Round=11, perf=[577, 776, 859, 636, 819, 496, 1032, 625, 313, 838], mean perf=6971/20016 (0.3483%)
Round=12, perf=[470, 556, 730, 842, 989, 588, 947, 1104, 788, 852], mean perf=7866/20016 (0.3930%)
Round=13, perf=[717, 573, 558, 863, 1007, 683, 894, 1232, 941, 682], mean perf=8150/20016 (0.4072%)
Round=14, perf=[747, 684, 862, 954, 996, 408, 862, 895, 591, 820], mean perf=7819/20016 (0.3906%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.3969
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.021965964339383415 / 0.5678197400135198, expected_batch_size: 653 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[545, 926, 498, 373, 530, 957, 376, 602, 578, 216], mean perf=5601/20016 (0.2798%)
Round=3, perf=[666, 844, 930, 613, 568, 828, 292, 517, 794, 369], mean perf=6421/20016 (0.3208%)
Round=4, perf=[523, 1035, 1170, 891, 1213, 966, 918, 773, 569, 611], mean perf=8669/20016 (0.4331%)
Round=5, perf=[988, 1356, 1351, 1084, 1511, 995, 1293, 1425, 1027, 920], mean perf=11950/20016 (0.5970%)
Round=6, perf=[976, 1246, 1377, 1078, 1477, 833, 1267, 1267, 904, 965], mean perf=11390/20016 (0.5690%)
Round=7, perf=[921, 1382, 1481, 1127, 1537, 1068, 1365, 1226, 895, 983], mean perf=11985/20016 (0.5988%)
Round=8, perf=[1105, 1285, 1415, 1272, 1517, 1028, 1271, 1438, 1181, 1080], mean perf=12592/20016 (0.6291%)
Round=9, perf=[1160, 1448, 1503, 1204, 1540, 1086, 1375, 1483, 1148, 1069], mean perf=13016/20016 (0.6503%)
Round=10, perf=[1205, 1463, 1648, 1232, 1529, 1098, 1453, 1401, 1194, 1156], mean perf=13379/20016 (0.6684%)
Round=11, perf=[1196, 1415, 1574, 1293, 1522, 1099, 1418, 1464, 1195, 1222], mean perf=13398/20016 (0.6694%)
Round=12, perf=[1223, 1436, 1559, 1286, 1549, 1145, 1431, 1449, 1220, 1158], mean perf=13456/20016 (0.6723%)
Round=13, perf=[1205, 1470, 1545, 1304, 1567, 1206, 1413, 1488, 1242, 1176], mean perf=13616/20016 (0.6803%)
Round=14, perf=[1225, 1517, 1489, 1272, 1599, 1180, 1417, 1529, 1190, 1166], mean perf=13584/20016 (0.6787%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.0001, Perf=0.6771, seed=45
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17742571183510908, expected_batch_size: 140 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[335, 524, 0, 0, 126, 495, 116, 453, 378, 0], mean perf=2427/20016 (0.1213%)
Round=2, perf=[514, 744, 387, 665, 863, 350, 503, 559, 138, 266], mean perf=4989/20016 (0.2493%)
Round=3, perf=[395, 449, 728, 379, 833, 99, 391, 460, 362, 5], mean perf=4101/20016 (0.2049%)
Round=4, perf=[543, 533, 807, 409, 238, 246, 338, 17, 223, 548], mean perf=3902/20016 (0.1949%)
Round=5, perf=[724, 973, 846, 367, 947, 517, 658, 877, 634, 149], mean perf=6692/20016 (0.3343%)
Round=6, perf=[444, 434, 320, 500, 694, 425, 511, 871, 558, 451], mean perf=5208/20016 (0.2602%)
Round=7, perf=[352, 664, 640, 841, 1042, 660, 782, 852, 448, 594], mean perf=6875/20016 (0.3435%)
Round=8, perf=[745, 491, 722, 1073, 1012, 251, 701, 1138, 753, 793], mean perf=7679/20016 (0.3836%)
Round=9, perf=[704, 1105, 723, 576, 956, 742, 632, 774, 495, 246], mean perf=6953/20016 (0.3474%)
Round=10, perf=[561, 687, 708, 813, 1230, 368, 795, 955, 459, 427], mean perf=7003/20016 (0.3499%)
Round=11, perf=[773, 917, 731, 968, 1109, 632, 831, 795, 436, 590], mean perf=7782/20016 (0.3888%)
Round=12, perf=[1018, 1129, 896, 1048, 1321, 646, 1118, 1273, 681, 879], mean perf=10009/20016 (0.5000%)
Round=13, perf=[905, 1022, 752, 1068, 1380, 908, 1000, 1407, 951, 644], mean perf=10037/20016 (0.5014%)
Round=14, perf=[985, 1158, 958, 1134, 1317, 1034, 1014, 1369, 1013, 822], mean perf=10804/20016 (0.5398%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5137
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021967392814128458 / 0.021967392814128458, expected_batch_size: 86 / 3960
Round=0, perf=[461, 464, 120, 111, 139, 390, 65, 454, 489, 31], mean perf=2724/20016 (0.1361%)
Round=1, perf=[595, 590, 587, 204, 192, 7, 398, 4, 5, 403], mean perf=2985/20016 (0.1491%)
Round=2, perf=[407, 412, 411, 13, 1, 0, 419, 7, 10, 421], mean perf=2101/20016 (0.1050%)
Round=3, perf=[10, 138, 400, 272, 662, 143, 644, 534, 253, 253], mean perf=3309/20016 (0.1653%)
Round=4, perf=[300, 366, 481, 147, 151, 197, 429, 106, 126, 405], mean perf=2708/20016 (0.1353%)
Round=5, perf=[360, 302, 209, 125, 226, 374, 187, 515, 573, 82], mean perf=2953/20016 (0.1475%)
Round=6, perf=[555, 592, 641, 303, 380, 356, 458, 280, 265, 430], mean perf=4260/20016 (0.2128%)
Round=7, perf=[374, 654, 478, 69, 377, 315, 618, 305, 65, 376], mean perf=3631/20016 (0.1814%)
Round=8, perf=[750, 576, 650, 886, 742, 178, 736, 785, 436, 923], mean perf=6662/20016 (0.3328%)
Round=9, perf=[572, 412, 754, 672, 586, 313, 477, 621, 601, 616], mean perf=5624/20016 (0.2810%)
Round=10, perf=[795, 536, 771, 884, 863, 125, 707, 921, 621, 753], mean perf=6976/20016 (0.3485%)
Round=11, perf=[1019, 1141, 832, 917, 1006, 830, 788, 1018, 710, 660], mean perf=8921/20016 (0.4457%)
Round=12, perf=[1051, 913, 810, 1151, 1176, 557, 845, 1306, 834, 855], mean perf=9498/20016 (0.4745%)
Round=13, perf=[927, 1037, 683, 765, 969, 843, 759, 1003, 700, 497], mean perf=8183/20016 (0.4088%)
Round=14, perf=[913, 1168, 841, 723, 872, 843, 749, 1006, 720, 689], mean perf=8524/20016 (0.4259%)
Mean performance of StrongForAll, eps=[array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])
 array([0.10001101, 0.10001101, 0.10001101, ..., 0.10001101, 0.10001101,
        0.10001101])                                                    ], delta=0.0001, Perf=0.4364
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.02198487121471031 / 1.0, expected_batch_size: 324 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[704, 921, 394, 524, 692, 555, 399, 717, 404, 215], mean perf=5525/20016 (0.2760%)
Round=3, perf=[421, 777, 666, 688, 949, 505, 583, 475, 147, 321], mean perf=5532/20016 (0.2764%)
Round=4, perf=[683, 1297, 895, 753, 1286, 996, 962, 987, 538, 390], mean perf=8787/20016 (0.4390%)
Round=5, perf=[928, 1111, 572, 1009, 1038, 1173, 809, 981, 736, 585], mean perf=8942/20016 (0.4467%)
Round=6, perf=[742, 993, 1113, 552, 1103, 618, 807, 937, 787, 331], mean perf=7983/20016 (0.3988%)
Round=7, perf=[490, 714, 1203, 1036, 1335, 554, 969, 769, 626, 669], mean perf=8365/20016 (0.4179%)
Round=8, perf=[905, 987, 937, 978, 1000, 734, 898, 532, 382, 789], mean perf=8142/20016 (0.4068%)
Round=9, perf=[874, 1240, 1335, 1035, 1545, 995, 1272, 1131, 883, 766], mean perf=11076/20016 (0.5534%)
Round=10, perf=[967, 1120, 1458, 1277, 1449, 742, 1244, 1180, 945, 1137], mean perf=11519/20016 (0.5755%)
Round=11, perf=[970, 1397, 1426, 1115, 1629, 1066, 1348, 1420, 1030, 846], mean perf=12247/20016 (0.6119%)
Round=12, perf=[1112, 1411, 1440, 1249, 1543, 1062, 1354, 1463, 1105, 1156], mean perf=12895/20016 (0.6442%)
Round=13, perf=[1205, 1250, 1252, 1490, 1533, 1257, 1240, 1529, 1337, 1194], mean perf=13287/20016 (0.6638%)
Round=14, perf=[1183, 1422, 1491, 1396, 1601, 1209, 1403, 1518, 1276, 1218], mean perf=13717/20016 (0.6853%)
Mean performance of BoundedPareto, min_eps=0.1001, max_eps=10.0000, delta=0.0001, Perf=0.6644, seed=45
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.08520470334118221, expected_batch_size: 99 / 3960
Round=0, perf=[383, 434, 1, 0, 4, 397, 6, 400, 402, 0], mean perf=2027/20016 (0.1013%)
Round=1, perf=[575, 439, 395, 542, 440, 66, 77, 218, 183, 188], mean perf=3123/20016 (0.1560%)
Round=2, perf=[406, 386, 414, 431, 402, 2, 4, 0, 11, 5], mean perf=2061/20016 (0.1030%)
Round=3, perf=[441, 433, 431, 456, 394, 10, 36, 26, 22, 61], mean perf=2310/20016 (0.1154%)
Round=4, perf=[721, 799, 745, 397, 443, 92, 452, 71, 21, 369], mean perf=4110/20016 (0.2053%)
Round=5, perf=[420, 387, 614, 774, 1043, 74, 664, 757, 335, 423], mean perf=5491/20016 (0.2743%)
Round=6, perf=[494, 724, 359, 848, 1023, 391, 740, 775, 129, 488], mean perf=5971/20016 (0.2983%)
Round=7, perf=[624, 593, 636, 950, 1036, 150, 695, 761, 269, 629], mean perf=6343/20016 (0.3169%)
Round=8, perf=[395, 450, 412, 788, 790, 226, 492, 549, 138, 504], mean perf=4744/20016 (0.2370%)
Round=9, perf=[457, 679, 499, 879, 1141, 377, 758, 834, 263, 495], mean perf=6382/20016 (0.3188%)
Round=10, perf=[838, 753, 712, 1107, 870, 558, 700, 975, 702, 996], mean perf=8211/20016 (0.4102%)
Round=11, perf=[629, 805, 634, 908, 852, 494, 676, 716, 365, 709], mean perf=6788/20016 (0.3391%)
Round=12, perf=[656, 671, 809, 1075, 1174, 434, 739, 1022, 680, 707], mean perf=7967/20016 (0.3980%)
Round=13, perf=[970, 944, 1125, 970, 1067, 442, 960, 963, 686, 890], mean perf=9017/20016 (0.4505%)
Round=14, perf=[497, 637, 795, 1135, 1082, 998, 919, 765, 751, 787], mean perf=8366/20016 (0.4180%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.4222
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[371, 414, 37, 8, 35, 384, 17, 423, 412, 3], mean perf=2104/20016 (0.1051%)
Round=1, perf=[9, 199, 350, 174, 179, 342, 188, 15, 196, 181], mean perf=1833/20016 (0.0916%)
Round=2, perf=[247, 254, 346, 3, 102, 13, 331, 79, 64, 270], mean perf=1709/20016 (0.0854%)
Round=3, perf=[405, 579, 225, 118, 289, 364, 415, 460, 221, 261], mean perf=3337/20016 (0.1667%)
Round=4, perf=[540, 662, 513, 434, 497, 286, 109, 135, 164, 14], mean perf=3354/20016 (0.1676%)
Round=5, perf=[531, 465, 736, 570, 743, 295, 431, 356, 460, 189], mean perf=4776/20016 (0.2386%)
Round=6, perf=[416, 406, 410, 671, 650, 22, 295, 285, 16, 275], mean perf=3446/20016 (0.1722%)
Round=7, perf=[348, 341, 302, 378, 297, 527, 232, 41, 318, 168], mean perf=2952/20016 (0.1475%)
Round=8, perf=[463, 303, 271, 839, 657, 427, 538, 481, 345, 531], mean perf=4855/20016 (0.2426%)
Round=9, perf=[524, 696, 421, 915, 1006, 549, 719, 751, 234, 493], mean perf=6308/20016 (0.3151%)
Round=10, perf=[677, 717, 611, 799, 795, 140, 685, 513, 46, 643], mean perf=5626/20016 (0.2811%)
Round=11, perf=[736, 929, 759, 1030, 920, 715, 685, 792, 506, 714], mean perf=7786/20016 (0.3890%)
Round=12, perf=[547, 951, 539, 836, 1077, 706, 803, 889, 342, 434], mean perf=7124/20016 (0.3559%)
Round=13, perf=[581, 692, 731, 909, 1092, 359, 720, 929, 528, 509], mean perf=7050/20016 (0.3522%)
Round=14, perf=[597, 782, 871, 978, 1161, 624, 882, 1049, 693, 707], mean perf=8344/20016 (0.4169%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.3750
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.021965964339383415 / 0.7037971774371359, expected_batch_size: 664 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[595, 608, 213, 184, 188, 427, 19, 416, 427, 12], mean perf=3089/20016 (0.1543%)
Round=3, perf=[735, 842, 1056, 1069, 1095, 751, 643, 995, 918, 627], mean perf=8731/20016 (0.4362%)
Round=4, perf=[683, 800, 1133, 938, 1189, 581, 762, 960, 836, 558], mean perf=8440/20016 (0.4217%)
Round=5, perf=[656, 804, 1351, 1123, 1243, 694, 929, 758, 737, 826], mean perf=9121/20016 (0.4557%)
Round=6, perf=[879, 1256, 1497, 1077, 1444, 962, 1213, 1103, 911, 908], mean perf=11250/20016 (0.5621%)
Round=7, perf=[968, 1390, 1400, 1054, 1504, 974, 1309, 1160, 824, 900], mean perf=11483/20016 (0.5737%)
Round=8, perf=[962, 1376, 1408, 1061, 1562, 1084, 1308, 1294, 978, 858], mean perf=11891/20016 (0.5941%)
Round=9, perf=[1148, 1422, 1469, 1211, 1544, 1069, 1341, 1426, 1118, 1079], mean perf=12827/20016 (0.6408%)
Round=10, perf=[1079, 1443, 1346, 1187, 1567, 1062, 1332, 1429, 974, 1043], mean perf=12462/20016 (0.6226%)
Round=11, perf=[1233, 1457, 1409, 1329, 1577, 1233, 1359, 1533, 1204, 1165], mean perf=13499/20016 (0.6744%)
Round=12, perf=[1286, 1458, 1423, 1359, 1554, 1237, 1353, 1569, 1283, 1218], mean perf=13740/20016 (0.6865%)
Round=13, perf=[1159, 1486, 1489, 1295, 1583, 1280, 1396, 1460, 1188, 1165], mean perf=13501/20016 (0.6745%)
Round=14, perf=[1276, 1577, 1580, 1397, 1602, 1373, 1443, 1525, 1315, 1243], mean perf=14331/20016 (0.7160%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.4646, delta=0.0001, Perf=0.6923, seed=45
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.1785851935282711, expected_batch_size: 143 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[0, 464, 388, 0, 434, 438, 464, 27, 0, 0], mean perf=2215/20016 (0.1107%)
Round=2, perf=[105, 471, 411, 99, 418, 409, 413, 89, 89, 73], mean perf=2577/20016 (0.1287%)
Round=3, perf=[503, 577, 689, 421, 596, 71, 218, 146, 141, 133], mean perf=3495/20016 (0.1746%)
Round=4, perf=[465, 164, 512, 865, 911, 27, 715, 1099, 665, 727], mean perf=6150/20016 (0.3073%)
Round=5, perf=[495, 603, 599, 875, 1079, 181, 701, 698, 214, 478], mean perf=5923/20016 (0.2959%)
Round=6, perf=[779, 744, 827, 1070, 1242, 340, 853, 1121, 705, 680], mean perf=8361/20016 (0.4177%)
Round=7, perf=[408, 814, 733, 843, 1311, 661, 993, 986, 444, 525], mean perf=7718/20016 (0.3856%)
Round=8, perf=[775, 1026, 660, 870, 1245, 681, 844, 1254, 698, 493], mean perf=8546/20016 (0.4270%)
Round=9, perf=[893, 931, 914, 946, 1100, 334, 959, 895, 474, 855], mean perf=8301/20016 (0.4147%)
Round=10, perf=[1146, 1208, 1025, 1311, 1243, 871, 1019, 1445, 1028, 1133], mean perf=11429/20016 (0.5710%)
Round=11, perf=[1093, 1254, 1117, 1201, 1299, 985, 1155, 1383, 959, 1128], mean perf=11574/20016 (0.5782%)
Round=12, perf=[1080, 1300, 1223, 1166, 1404, 1107, 1171, 1546, 1159, 1004], mean perf=12160/20016 (0.6075%)
Round=13, perf=[1131, 1303, 1175, 1165, 1513, 1033, 1231, 1548, 1150, 881], mean perf=12130/20016 (0.6060%)
Round=14, perf=[1246, 1232, 1456, 1429, 1292, 1054, 1163, 1271, 1245, 1280], mean perf=12668/20016 (0.6329%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.6155
