Project Path:  /data/privacyGroup/liujunxu/Fed-rPDP
noise_multiplier :  12.373046875
Round=0, perf=[1332, 1293, 565, 1173, 1115, 944, 912, 1432, 887, 894], mean perf=10547/20016 (0.5269%)
Round=1, perf=[1702, 1609, 1671, 1786, 1669, 1600, 1542, 1780, 1727, 1498], mean perf=16584/20016 (0.8285%)
Round=2, perf=[1797, 1694, 1703, 1848, 1674, 1669, 1575, 1839, 1801, 1548], mean perf=17148/20016 (0.8567%)
Round=3, perf=[1882, 1865, 1898, 1898, 1828, 1841, 1722, 1858, 1876, 1615], mean perf=18283/20016 (0.9134%)
Round=4, perf=[1935, 1892, 1900, 1933, 1841, 1880, 1745, 1898, 1908, 1656], mean perf=18588/20016 (0.9287%)
Round=5, perf=[1940, 1919, 1928, 1944, 1864, 1924, 1759, 1920, 1926, 1663], mean perf=18787/20016 (0.9386%)
Round=6, perf=[1951, 1942, 1951, 1958, 1885, 1935, 1775, 1922, 1932, 1669], mean perf=18920/20016 (0.9452%)
Round=7, perf=[1968, 1953, 1960, 1972, 1890, 1937, 1783, 1918, 1939, 1675], mean perf=18995/20016 (0.9490%)
Round=8, perf=[1970, 1960, 1970, 1970, 1902, 1945, 1790, 1925, 1946, 1681], mean perf=19059/20016 (0.9522%)
Round=9, perf=[1969, 1966, 1979, 1972, 1901, 1950, 1794, 1921, 1951, 1686], mean perf=19089/20016 (0.9537%)
Round=10, perf=[1972, 1957, 1961, 1986, 1895, 1954, 1790, 1938, 1956, 1692], mean perf=19101/20016 (0.9543%)
Round=11, perf=[1977, 1980, 1981, 1977, 1914, 1961, 1806, 1933, 1952, 1688], mean perf=19169/20016 (0.9577%)
Round=12, perf=[1983, 1987, 1985, 1983, 1913, 1968, 1803, 1938, 1961, 1700], mean perf=19221/20016 (0.9603%)
Round=13, perf=[1989, 1973, 1974, 1993, 1904, 1962, 1803, 1939, 1964, 1703], mean perf=19204/20016 (0.9594%)
Round=14, perf=[1987, 1981, 1983, 1989, 1915, 1966, 1808, 1943, 1965, 1699], mean perf=19236/20016 (0.9610%)
Mean performance without rPDP, Mean Perf=0.9602
../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the largest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
r2 score of the curve fitting. 0.9998451794812138
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[377, 436, 4, 0, 14, 408, 8, 402, 401, 0], mean perf=2050/20016 (0.1024%)
Round=1, perf=[436, 456, 278, 120, 115, 268, 313, 158, 192, 271], mean perf=2607/20016 (0.1302%)
Round=2, perf=[518, 501, 117, 134, 96, 371, 11, 366, 378, 0], mean perf=2492/20016 (0.1245%)
Round=3, perf=[91, 280, 151, 260, 442, 339, 436, 354, 95, 258], mean perf=2706/20016 (0.1352%)
Round=4, perf=[246, 308, 202, 599, 612, 431, 578, 492, 179, 496], mean perf=4143/20016 (0.2070%)
Round=5, perf=[377, 398, 448, 364, 336, 126, 711, 321, 95, 688], mean perf=3864/20016 (0.1930%)
Round=6, perf=[630, 835, 816, 285, 448, 186, 572, 21, 22, 356], mean perf=4171/20016 (0.2084%)
Round=7, perf=[800, 644, 623, 592, 400, 27, 221, 154, 164, 392], mean perf=4017/20016 (0.2007%)
Round=8, perf=[576, 676, 608, 557, 667, 396, 623, 544, 310, 512], mean perf=5469/20016 (0.2732%)
Round=9, perf=[764, 857, 927, 715, 958, 391, 771, 832, 568, 509], mean perf=7292/20016 (0.3643%)
Round=10, perf=[753, 689, 842, 681, 809, 189, 919, 749, 406, 738], mean perf=6775/20016 (0.3385%)
Round=11, perf=[793, 779, 821, 881, 755, 610, 606, 693, 622, 746], mean perf=7306/20016 (0.3650%)
Round=12, perf=[1002, 808, 900, 891, 679, 649, 557, 648, 748, 681], mean perf=7563/20016 (0.3778%)
Round=13, perf=[989, 1150, 946, 990, 1286, 887, 1040, 1134, 829, 655], mean perf=9906/20016 (0.4949%)
Round=14, perf=[888, 1210, 1002, 872, 1255, 663, 1073, 1022, 498, 758], mean perf=9241/20016 (0.4617%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.4448
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.021965964339383415 / 0.5678197400135198, expected_batch_size: 653 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[404, 490, 34, 20, 52, 429, 27, 411, 407, 1], mean perf=2275/20016 (0.1137%)
Round=3, perf=[704, 1100, 1084, 722, 1080, 847, 671, 707, 706, 345], mean perf=7966/20016 (0.3980%)
Round=4, perf=[892, 1126, 1350, 995, 1121, 896, 951, 823, 841, 858], mean perf=9853/20016 (0.4923%)
Round=5, perf=[995, 1301, 1338, 1031, 1322, 898, 1164, 1096, 848, 885], mean perf=10878/20016 (0.5435%)
Round=6, perf=[894, 1377, 1441, 999, 1530, 955, 1318, 1197, 831, 839], mean perf=11381/20016 (0.5686%)
Round=7, perf=[1049, 1281, 1409, 1248, 1493, 1104, 1250, 1262, 1093, 1072], mean perf=12261/20016 (0.6126%)
Round=8, perf=[898, 1322, 1252, 980, 1555, 886, 1268, 1390, 845, 781], mean perf=11177/20016 (0.5584%)
Round=9, perf=[967, 1198, 1436, 1276, 1548, 937, 1324, 1304, 982, 1127], mean perf=12099/20016 (0.6045%)
Round=10, perf=[1080, 1455, 1445, 1199, 1582, 1176, 1356, 1426, 1121, 1023], mean perf=12863/20016 (0.6426%)
Round=11, perf=[1179, 1441, 1472, 1296, 1569, 1184, 1380, 1454, 1170, 1127], mean perf=13272/20016 (0.6631%)
Round=12, perf=[1207, 1434, 1438, 1299, 1565, 1198, 1332, 1492, 1225, 1112], mean perf=13302/20016 (0.6646%)
Round=13, perf=[1311, 1437, 1453, 1449, 1582, 1282, 1366, 1599, 1371, 1251], mean perf=14101/20016 (0.7045%)
Round=14, perf=[1317, 1517, 1541, 1460, 1593, 1319, 1423, 1576, 1353, 1318], mean perf=14417/20016 (0.7203%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.0001, Perf=0.6965, seed=42
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17742571183510908, expected_batch_size: 140 / 3960
Round=0, perf=[439, 421, 0, 66, 0, 453, 0, 394, 468, 36], mean perf=2277/20016 (0.1138%)
Round=1, perf=[333, 399, 151, 74, 91, 434, 65, 439, 514, 67], mean perf=2567/20016 (0.1282%)
Round=2, perf=[434, 11, 61, 437, 41, 114, 45, 356, 494, 424], mean perf=2417/20016 (0.1208%)
Round=3, perf=[350, 386, 527, 429, 546, 588, 422, 223, 486, 209], mean perf=4166/20016 (0.2081%)
Round=4, perf=[207, 439, 769, 286, 801, 406, 720, 496, 466, 269], mean perf=4859/20016 (0.2428%)
Round=5, perf=[310, 292, 695, 365, 747, 19, 373, 467, 387, 52], mean perf=3707/20016 (0.1852%)
Round=6, perf=[498, 642, 1006, 444, 845, 362, 672, 516, 525, 385], mean perf=5895/20016 (0.2945%)
Round=7, perf=[29, 530, 862, 302, 813, 831, 739, 572, 544, 280], mean perf=5502/20016 (0.2749%)
Round=8, perf=[608, 420, 597, 685, 788, 338, 874, 1194, 870, 859], mean perf=7233/20016 (0.3614%)
Round=9, perf=[561, 715, 1097, 597, 866, 829, 812, 893, 1066, 604], mean perf=8040/20016 (0.4017%)
Round=10, perf=[820, 997, 1081, 1132, 1356, 732, 1031, 1224, 823, 845], mean perf=10041/20016 (0.5016%)
Round=11, perf=[987, 768, 1233, 1121, 1047, 376, 1059, 1087, 901, 1189], mean perf=9768/20016 (0.4880%)
Round=12, perf=[976, 825, 1080, 1274, 1221, 751, 862, 1402, 1204, 954], mean perf=10549/20016 (0.5270%)
Round=13, perf=[1069, 1133, 1195, 1124, 1339, 755, 1173, 1374, 1009, 961], mean perf=11132/20016 (0.5562%)
Round=14, perf=[857, 940, 1367, 1102, 1235, 846, 1047, 1151, 1070, 872], mean perf=10487/20016 (0.5239%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5357
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021967463324448988 / 0.021967463324448988, expected_batch_size: 86 / 3960
Round=0, perf=[409, 0, 0, 399, 0, 415, 0, 0, 425, 185], mean perf=1833/20016 (0.0916%)
Round=1, perf=[359, 385, 558, 469, 523, 208, 198, 206, 222, 125], mean perf=3253/20016 (0.1625%)
Round=2, perf=[403, 383, 481, 494, 427, 79, 27, 44, 93, 64], mean perf=2495/20016 (0.1247%)
Round=3, perf=[96, 321, 435, 244, 172, 527, 180, 89, 333, 237], mean perf=2634/20016 (0.1316%)
Round=4, perf=[402, 587, 626, 652, 528, 669, 249, 340, 404, 359], mean perf=4816/20016 (0.2406%)
Round=5, perf=[349, 496, 612, 536, 1029, 289, 736, 816, 417, 291], mean perf=5571/20016 (0.2783%)
Round=6, perf=[559, 573, 718, 890, 749, 229, 581, 445, 211, 732], mean perf=5687/20016 (0.2841%)
Round=7, perf=[399, 242, 550, 760, 435, 320, 582, 542, 475, 930], mean perf=5235/20016 (0.2615%)
Round=8, perf=[236, 509, 549, 865, 787, 696, 640, 665, 395, 687], mean perf=6029/20016 (0.3012%)
Round=9, perf=[489, 471, 629, 845, 827, 124, 531, 498, 190, 521], mean perf=5125/20016 (0.2560%)
Round=10, perf=[614, 530, 664, 889, 1057, 183, 734, 947, 491, 603], mean perf=6712/20016 (0.3353%)
Round=11, perf=[503, 613, 788, 864, 1191, 391, 784, 932, 551, 469], mean perf=7086/20016 (0.3540%)
Round=12, perf=[821, 837, 902, 1057, 1124, 388, 864, 863, 421, 787], mean perf=8064/20016 (0.4029%)
Round=13, perf=[801, 1093, 1016, 757, 1182, 639, 1127, 1117, 681, 780], mean perf=9193/20016 (0.4593%)
Round=14, perf=[1010, 1029, 853, 966, 1253, 848, 998, 1259, 957, 660], mean perf=9833/20016 (0.4913%)
Mean performance of StrongForAll, eps=[array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])
 array([0.10001155, 0.10001155, 0.10001155, ..., 0.10001155, 0.10001155,
        0.10001155])                                                    ], delta=0.0001, Perf=0.4512
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.021975013341928005 / 1.0, expected_batch_size: 328 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[485, 512, 68, 91, 61, 400, 4, 399, 404, 0], mean perf=2424/20016 (0.1211%)
Round=2, perf=[703, 959, 749, 478, 787, 679, 386, 379, 504, 102], mean perf=5726/20016 (0.2861%)
Round=3, perf=[565, 849, 953, 686, 574, 754, 471, 281, 452, 574], mean perf=6159/20016 (0.3077%)
Round=4, perf=[641, 1107, 1181, 727, 1026, 783, 803, 498, 397, 541], mean perf=7704/20016 (0.3849%)
Round=5, perf=[222, 331, 815, 593, 477, 561, 264, 236, 494, 409], mean perf=4402/20016 (0.2199%)
Round=6, perf=[688, 1173, 1004, 1045, 1349, 1148, 969, 1192, 858, 662], mean perf=10088/20016 (0.5040%)
Round=7, perf=[639, 1129, 1021, 1021, 1419, 978, 1118, 1036, 615, 756], mean perf=9732/20016 (0.4862%)
Round=8, perf=[717, 1180, 1137, 1047, 1556, 984, 1148, 1270, 834, 657], mean perf=10530/20016 (0.5261%)
Round=9, perf=[828, 979, 1221, 1178, 1440, 695, 1076, 1210, 925, 890], mean perf=10442/20016 (0.5217%)
Round=10, perf=[998, 1461, 1494, 997, 1462, 1195, 1301, 1106, 996, 814], mean perf=11824/20016 (0.5907%)
Round=11, perf=[1092, 1336, 1290, 1184, 1584, 1065, 1279, 1400, 1086, 882], mean perf=12198/20016 (0.6094%)
Round=12, perf=[918, 1273, 1182, 1118, 1556, 1121, 1167, 1533, 1136, 771], mean perf=11775/20016 (0.5883%)
Round=13, perf=[1134, 1466, 1609, 1237, 1526, 1157, 1428, 1322, 1146, 1114], mean perf=13139/20016 (0.6564%)
Round=14, perf=[1213, 1394, 1465, 1380, 1550, 1281, 1394, 1484, 1269, 1191], mean perf=13621/20016 (0.6805%)
Mean performance of BoundedPareto, min_eps=0.1001, max_eps=10.0000, delta=0.0001, Perf=0.6417, seed=42
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.08512468628117155, expected_batch_size: 97 / 3960
Round=0, perf=[397, 394, 113, 57, 47, 332, 168, 267, 275, 145], mean perf=2195/20016 (0.1097%)
Round=1, perf=[463, 473, 235, 8, 4, 191, 258, 188, 196, 248], mean perf=2264/20016 (0.1131%)
Round=2, perf=[411, 415, 414, 0, 0, 0, 421, 0, 0, 417], mean perf=2078/20016 (0.1038%)
Round=3, perf=[453, 458, 462, 44, 40, 1, 420, 0, 0, 417], mean perf=2295/20016 (0.1147%)
Round=4, perf=[443, 462, 451, 431, 424, 34, 78, 21, 18, 54], mean perf=2416/20016 (0.1207%)
Round=5, perf=[461, 390, 746, 701, 928, 73, 702, 661, 360, 473], mean perf=5495/20016 (0.2745%)
Round=6, perf=[390, 473, 537, 337, 362, 212, 725, 308, 123, 675], mean perf=4142/20016 (0.2069%)
Round=7, perf=[358, 644, 572, 886, 869, 626, 648, 645, 300, 599], mean perf=6147/20016 (0.3071%)
Round=8, perf=[799, 479, 628, 1089, 849, 123, 605, 900, 566, 865], mean perf=6903/20016 (0.3449%)
Round=9, perf=[685, 1156, 946, 779, 1269, 657, 1138, 981, 458, 568], mean perf=8637/20016 (0.4315%)
Round=10, perf=[892, 1098, 1011, 1054, 1107, 795, 895, 1097, 741, 785], mean perf=9475/20016 (0.4734%)
Round=11, perf=[595, 884, 884, 1047, 1117, 645, 865, 781, 391, 716], mean perf=7925/20016 (0.3959%)
Round=12, perf=[931, 1155, 825, 1047, 1017, 817, 835, 995, 599, 789], mean perf=9010/20016 (0.4501%)
Round=13, perf=[1098, 1297, 1017, 1093, 1358, 794, 1134, 1426, 915, 834], mean perf=10966/20016 (0.5479%)
Round=14, perf=[1038, 1239, 1177, 1172, 1340, 951, 1092, 1361, 996, 918], mean perf=11284/20016 (0.5637%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5206
mnist_rpdp_fed_niid.py:172: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.021965964339383415 / 0.021965964339383415, expected_batch_size: 86 / 3960
Round=0, perf=[357, 423, 19, 0, 28, 375, 33, 373, 389, 0], mean perf=1997/20016 (0.0998%)
Round=1, perf=[105, 13, 248, 482, 655, 16, 611, 750, 338, 452], mean perf=3670/20016 (0.1834%)
Round=2, perf=[363, 149, 166, 302, 189, 117, 154, 470, 440, 322], mean perf=2672/20016 (0.1335%)
Round=3, perf=[610, 467, 528, 515, 450, 84, 145, 78, 191, 150], mean perf=3218/20016 (0.1608%)
Round=4, perf=[406, 426, 463, 395, 478, 73, 115, 48, 54, 29], mean perf=2487/20016 (0.1243%)
Round=5, perf=[375, 363, 806, 588, 501, 264, 167, 147, 396, 284], mean perf=3891/20016 (0.1944%)
Round=6, perf=[588, 499, 700, 497, 562, 27, 260, 235, 275, 215], mean perf=3858/20016 (0.1927%)
Round=7, perf=[380, 392, 696, 409, 693, 224, 366, 378, 452, 95], mean perf=4085/20016 (0.2041%)
Round=8, perf=[802, 518, 424, 674, 418, 267, 53, 377, 484, 300], mean perf=4317/20016 (0.2157%)
Round=9, perf=[752, 630, 635, 593, 126, 768, 198, 438, 802, 626], mean perf=5568/20016 (0.2782%)
Round=10, perf=[389, 113, 548, 867, 735, 374, 712, 896, 744, 783], mean perf=6161/20016 (0.3078%)
Round=11, perf=[703, 755, 1079, 889, 951, 479, 739, 697, 628, 695], mean perf=7615/20016 (0.3804%)
Round=12, perf=[818, 861, 1076, 751, 785, 716, 882, 682, 764, 789], mean perf=8124/20016 (0.4059%)
Round=13, perf=[762, 841, 1023, 675, 777, 638, 835, 835, 778, 754], mean perf=7918/20016 (0.3956%)
Round=14, perf=[534, 869, 647, 607, 1023, 691, 815, 890, 496, 401], mean perf=6973/20016 (0.3484%)
Mean performance of StrongForAll, eps=[array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])
 array([0.1, 0.1, 0.1, ..., 0.1, 0.1, 0.1])], delta=0.0001, Perf=0.3833
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.021965964339383415 / 0.6936398845271706, expected_batch_size: 671 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=2, perf=[469, 651, 142, 80, 259, 534, 177, 543, 437, 3], mean perf=3295/20016 (0.1646%)
Round=3, perf=[613, 874, 1213, 666, 1138, 544, 776, 699, 684, 375], mean perf=7582/20016 (0.3788%)
Round=4, perf=[563, 959, 1322, 998, 1402, 747, 1083, 828, 637, 701], mean perf=9240/20016 (0.4616%)
Round=5, perf=[746, 1149, 1441, 988, 1274, 922, 1080, 821, 741, 816], mean perf=9978/20016 (0.4985%)
Round=6, perf=[782, 1205, 1390, 1070, 1557, 919, 1295, 1097, 773, 848], mean perf=10936/20016 (0.5464%)
Round=7, perf=[978, 1394, 1395, 1113, 1534, 1041, 1328, 1192, 838, 948], mean perf=11761/20016 (0.5876%)
Round=8, perf=[1118, 1361, 1352, 1197, 1564, 957, 1359, 1389, 966, 1057], mean perf=12320/20016 (0.6155%)
Round=9, perf=[1184, 1502, 1411, 1231, 1599, 1106, 1369, 1526, 1114, 1067], mean perf=13109/20016 (0.6549%)
Round=10, perf=[1319, 1347, 1395, 1362, 1529, 1163, 1270, 1498, 1328, 1134], mean perf=13345/20016 (0.6667%)
Round=11, perf=[1299, 1502, 1420, 1365, 1596, 1272, 1364, 1566, 1294, 1169], mean perf=13847/20016 (0.6918%)
Round=12, perf=[1283, 1476, 1517, 1328, 1543, 1166, 1419, 1503, 1221, 1243], mean perf=13699/20016 (0.6844%)
Round=13, perf=[1373, 1473, 1510, 1412, 1529, 1258, 1401, 1531, 1327, 1295], mean perf=14109/20016 (0.7049%)
Round=14, perf=[1324, 1497, 1402, 1382, 1576, 1361, 1356, 1598, 1361, 1149], mean perf=14006/20016 (0.6997%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.3514, delta=0.0001, Perf=0.6963, seed=42
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.17820726531198705, expected_batch_size: 143 / 3960
Round=0, perf=[384, 430, 0, 0, 0, 395, 0, 399, 404, 0], mean perf=2012/20016 (0.1005%)
Round=1, perf=[395, 438, 9, 12, 5, 395, 2, 397, 404, 0], mean perf=2057/20016 (0.1028%)
Round=2, perf=[478, 784, 482, 189, 479, 569, 322, 299, 310, 5], mean perf=3917/20016 (0.1957%)
Round=3, perf=[717, 787, 851, 752, 478, 629, 379, 392, 554, 593], mean perf=6132/20016 (0.3064%)
Round=4, perf=[393, 785, 330, 483, 728, 654, 571, 649, 230, 288], mean perf=5111/20016 (0.2553%)
Round=5, perf=[441, 838, 470, 673, 925, 557, 636, 639, 129, 277], mean perf=5585/20016 (0.2790%)
Round=6, perf=[803, 1256, 981, 613, 1196, 1133, 785, 947, 875, 177], mean perf=8766/20016 (0.4379%)
Round=7, perf=[619, 1161, 1129, 743, 1033, 1034, 829, 609, 553, 493], mean perf=8203/20016 (0.4098%)
Round=8, perf=[512, 675, 977, 701, 1010, 318, 598, 533, 385, 406], mean perf=6115/20016 (0.3055%)
Round=9, perf=[567, 970, 1072, 969, 1406, 957, 1112, 1179, 859, 705], mean perf=9796/20016 (0.4894%)
Round=10, perf=[894, 1207, 1023, 1116, 1226, 963, 1076, 1089, 689, 938], mean perf=10221/20016 (0.5106%)
Round=11, perf=[1036, 1364, 1187, 1127, 1177, 1062, 1022, 1076, 830, 929], mean perf=10810/20016 (0.5401%)
Round=12, perf=[1005, 1492, 1278, 1026, 1483, 1238, 1246, 1271, 941, 781], mean perf=11761/20016 (0.5876%)
Round=13, perf=[943, 1377, 1191, 1155, 1513, 1250, 1182, 1263, 933, 785], mean perf=11592/20016 (0.5791%)
Round=14, perf=[780, 1426, 1106, 999, 1327, 1321, 1046, 1118, 776, 716], mean perf=10615/20016 (0.5303%)
Mean performance of Dropout, eps=1.0, delta=0.0001, Perf=0.5657
