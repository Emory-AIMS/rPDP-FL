../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the smallest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
noise_multiplier :  12.2509765625
Round=0, perf=[70, 57, 11, 28], mean perf=166/254 (0.6535%)
Round=1, perf=[73, 61, 11, 27], mean perf=172/254 (0.6772%)
Round=2, perf=[79, 62, 11, 28], mean perf=180/254 (0.7087%)
Round=3, perf=[79, 63, 11, 28], mean perf=181/254 (0.7126%)
Round=4, perf=[81, 64, 10, 29], mean perf=184/254 (0.7244%)
Round=5, perf=[80, 68, 10, 29], mean perf=187/254 (0.7362%)
Round=6, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=7, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=8, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=9, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=10, perf=[82, 68, 11, 29], mean perf=190/254 (0.7480%)
Round=11, perf=[81, 68, 11, 29], mean perf=189/254 (0.7441%)
Round=12, perf=[82, 68, 11, 30], mean perf=191/254 (0.7520%)
Round=13, perf=[81, 68, 11, 30], mean perf=190/254 (0.7480%)
Round=14, perf=[81, 68, 11, 29], mean perf=189/254 (0.7441%)
Mean performance without rPDP, Mean Perf=0.7480
r2 score of the curve fitting. 0.999881760403909
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[60, 47, 12, 27], mean perf=146/254 (0.5748%)
Round=1, perf=[71, 49, 10, 28], mean perf=158/254 (0.6220%)
Round=2, perf=[70, 51, 11, 29], mean perf=161/254 (0.6339%)
Round=3, perf=[71, 59, 10, 24], mean perf=164/254 (0.6457%)
Round=4, perf=[74, 63, 12, 27], mean perf=176/254 (0.6929%)
Round=5, perf=[61, 52, 11, 23], mean perf=147/254 (0.5787%)
Round=6, perf=[62, 55, 8, 22], mean perf=147/254 (0.5787%)
Round=7, perf=[61, 47, 8, 23], mean perf=139/254 (0.5472%)
Round=8, perf=[58, 47, 13, 25], mean perf=143/254 (0.5630%)
Round=9, perf=[55, 40, 9, 20], mean perf=124/254 (0.4882%)
Round=10, perf=[66, 48, 8, 23], mean perf=145/254 (0.5709%)
Round=11, perf=[65, 49, 10, 28], mean perf=152/254 (0.5984%)
Round=12, perf=[58, 47, 10, 26], mean perf=141/254 (0.5551%)
Round=13, perf=[52, 47, 10, 26], mean perf=135/254 (0.5315%)
Round=14, perf=[50, 44, 10, 25], mean perf=129/254 (0.5079%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.5315
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.025357178940808994 / 0.5924704691170143, expected_batch_size: 21 / 199
Round=0, perf=[68, 56, 12, 29], mean perf=165/254 (0.6496%)
Round=1, perf=[71, 56, 13, 30], mean perf=170/254 (0.6693%)
Round=2, perf=[72, 59, 13, 31], mean perf=175/254 (0.6890%)
Round=3, perf=[76, 62, 13, 31], mean perf=182/254 (0.7165%)
Round=4, perf=[79, 63, 12, 31], mean perf=185/254 (0.7283%)
Round=5, perf=[77, 64, 12, 31], mean perf=184/254 (0.7244%)
Round=6, perf=[79, 63, 12, 31], mean perf=185/254 (0.7283%)
Round=7, perf=[79, 64, 12, 32], mean perf=187/254 (0.7362%)
Round=8, perf=[77, 62, 12, 32], mean perf=183/254 (0.7205%)
Round=9, perf=[79, 62, 12, 32], mean perf=185/254 (0.7283%)
Round=10, perf=[76, 62, 12, 32], mean perf=182/254 (0.7165%)
Round=11, perf=[80, 62, 12, 32], mean perf=186/254 (0.7323%)
Round=12, perf=[80, 63, 12, 32], mean perf=187/254 (0.7362%)
Round=13, perf=[81, 63, 12, 32], mean perf=188/254 (0.7402%)
Round=14, perf=[80, 61, 12, 30], mean perf=183/254 (0.7205%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.001, Perf=0.7323, seed=44
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.12011964891700398, expected_batch_size: 7 / 199
Round=0, perf=[66, 55, 10, 27], mean perf=158/254 (0.6220%)
Round=1, perf=[68, 52, 8, 23], mean perf=151/254 (0.5945%)
Round=2, perf=[68, 52, 12, 29], mean perf=161/254 (0.6339%)
Round=3, perf=[71, 60, 11, 28], mean perf=170/254 (0.6693%)
Round=4, perf=[72, 61, 11, 29], mean perf=173/254 (0.6811%)
Round=5, perf=[71, 57, 12, 28], mean perf=168/254 (0.6614%)
Round=6, perf=[71, 60, 12, 28], mean perf=171/254 (0.6732%)
Round=7, perf=[71, 63, 11, 29], mean perf=174/254 (0.6850%)
Round=8, perf=[71, 63, 12, 30], mean perf=176/254 (0.6929%)
Round=9, perf=[74, 63, 11, 31], mean perf=179/254 (0.7047%)
Round=10, perf=[72, 60, 9, 27], mean perf=168/254 (0.6614%)
Round=11, perf=[73, 62, 10, 29], mean perf=174/254 (0.6850%)
Round=12, perf=[67, 61, 11, 28], mean perf=167/254 (0.6575%)
Round=13, perf=[72, 61, 12, 30], mean perf=175/254 (0.6890%)
Round=14, perf=[73, 59, 11, 30], mean perf=173/254 (0.6811%)
Mean performance of Dropout, eps=0.7882471351284466, delta=0.001, Perf=0.6759
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025447820471834373 / 0.025447820471834373, expected_batch_size: 5 / 199
Round=0, perf=[71, 53, 12, 30], mean perf=166/254 (0.6535%)
Round=1, perf=[67, 55, 11, 33], mean perf=166/254 (0.6535%)
Round=2, perf=[69, 56, 8, 32], mean perf=165/254 (0.6496%)
Round=3, perf=[76, 65, 4, 29], mean perf=174/254 (0.6850%)
Round=4, perf=[77, 65, 7, 28], mean perf=177/254 (0.6969%)
Round=5, perf=[74, 69, 7, 23], mean perf=173/254 (0.6811%)
Round=6, perf=[68, 63, 7, 22], mean perf=160/254 (0.6299%)
Round=7, perf=[70, 63, 7, 24], mean perf=164/254 (0.6457%)
Round=8, perf=[68, 62, 8, 23], mean perf=161/254 (0.6339%)
Round=9, perf=[72, 61, 9, 25], mean perf=167/254 (0.6575%)
Round=10, perf=[75, 64, 9, 24], mean perf=172/254 (0.6772%)
Round=11, perf=[75, 59, 8, 27], mean perf=169/254 (0.6654%)
Round=12, perf=[75, 62, 8, 25], mean perf=170/254 (0.6693%)
Round=13, perf=[72, 62, 8, 24], mean perf=166/254 (0.6535%)
Round=14, perf=[79, 64, 8, 23], mean perf=174/254 (0.6850%)
Mean performance of StrongForAll, eps=0.10063650991700027, delta=0.001, Perf=0.6693
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.02559024085180924 / 0.4415318384643751, expected_batch_size: 14 / 199
Round=0, perf=[69, 52, 10, 26], mean perf=157/254 (0.6181%)
Round=1, perf=[70, 54, 11, 29], mean perf=164/254 (0.6457%)
Round=2, perf=[71, 53, 12, 25], mean perf=161/254 (0.6339%)
Round=3, perf=[71, 58, 10, 28], mean perf=167/254 (0.6575%)
Round=4, perf=[74, 62, 11, 26], mean perf=173/254 (0.6811%)
Round=5, perf=[76, 60, 11, 26], mean perf=173/254 (0.6811%)
Round=6, perf=[75, 62, 10, 26], mean perf=173/254 (0.6811%)
Round=7, perf=[80, 62, 10, 26], mean perf=178/254 (0.7008%)
Round=8, perf=[77, 64, 10, 24], mean perf=175/254 (0.6890%)
Round=9, perf=[76, 62, 8, 24], mean perf=170/254 (0.6693%)
Round=10, perf=[78, 63, 8, 24], mean perf=173/254 (0.6811%)
Round=11, perf=[75, 63, 8, 26], mean perf=172/254 (0.6772%)
Round=12, perf=[77, 64, 8, 25], mean perf=174/254 (0.6850%)
Round=13, perf=[79, 64, 8, 26], mean perf=177/254 (0.6969%)
Round=14, perf=[79, 65, 8, 27], mean perf=179/254 (0.7047%)
Mean performance of BoundedPareto, min_eps=0.1016, max_eps=3.4983, delta=0.001, Perf=0.6955, seed=44
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.06624711698184846, expected_batch_size: 4 / 199
Round=0, perf=[71, 57, 10, 26], mean perf=164/254 (0.6457%)
Round=1, perf=[78, 65, 10, 31], mean perf=184/254 (0.7244%)
Round=2, perf=[81, 67, 10, 29], mean perf=187/254 (0.7362%)
Round=3, perf=[80, 65, 12, 28], mean perf=185/254 (0.7283%)
Round=4, perf=[78, 63, 12, 29], mean perf=182/254 (0.7165%)
Round=5, perf=[77, 63, 11, 29], mean perf=180/254 (0.7087%)
Round=6, perf=[72, 63, 12, 31], mean perf=178/254 (0.7008%)
Round=7, perf=[69, 65, 12, 32], mean perf=178/254 (0.7008%)
Round=8, perf=[70, 68, 11, 28], mean perf=177/254 (0.6969%)
Round=9, perf=[68, 69, 11, 27], mean perf=175/254 (0.6890%)
Round=10, perf=[65, 66, 9, 29], mean perf=169/254 (0.6654%)
Round=11, perf=[61, 67, 8, 31], mean perf=167/254 (0.6575%)
Round=12, perf=[61, 64, 9, 30], mean perf=164/254 (0.6457%)
Round=13, perf=[60, 66, 8, 26], mean perf=160/254 (0.6299%)
Round=14, perf=[62, 64, 12, 29], mean perf=167/254 (0.6575%)
Mean performance of Dropout, eps=0.3913260933048359, delta=0.001, Perf=0.6444
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[72, 68, 10, 27], mean perf=177/254 (0.6969%)
Round=1, perf=[76, 71, 8, 24], mean perf=179/254 (0.7047%)
Round=2, perf=[75, 70, 10, 28], mean perf=183/254 (0.7205%)
Round=3, perf=[77, 69, 10, 30], mean perf=186/254 (0.7323%)
Round=4, perf=[79, 70, 9, 27], mean perf=185/254 (0.7283%)
Round=5, perf=[73, 69, 10, 28], mean perf=180/254 (0.7087%)
Round=6, perf=[78, 67, 9, 27], mean perf=181/254 (0.7126%)
Round=7, perf=[75, 71, 9, 27], mean perf=182/254 (0.7165%)
Round=8, perf=[76, 72, 10, 28], mean perf=186/254 (0.7323%)
Round=9, perf=[77, 73, 9, 28], mean perf=187/254 (0.7362%)
Round=10, perf=[76, 74, 9, 29], mean perf=188/254 (0.7402%)
Round=11, perf=[77, 75, 9, 27], mean perf=188/254 (0.7402%)
Round=12, perf=[74, 72, 9, 27], mean perf=182/254 (0.7165%)
Round=13, perf=[74, 71, 6, 25], mean perf=176/254 (0.6929%)
Round=14, perf=[73, 70, 7, 25], mean perf=175/254 (0.6890%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.6995
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.025357178940808994 / 0.6700721902224289, expected_batch_size: 19 / 199
Round=0, perf=[67, 56, 10, 27], mean perf=160/254 (0.6299%)
Round=1, perf=[67, 60, 10, 27], mean perf=164/254 (0.6457%)
Round=2, perf=[73, 64, 11, 27], mean perf=175/254 (0.6890%)
Round=3, perf=[71, 65, 11, 29], mean perf=176/254 (0.6929%)
Round=4, perf=[77, 64, 11, 29], mean perf=181/254 (0.7126%)
Round=5, perf=[77, 65, 12, 29], mean perf=183/254 (0.7205%)
Round=6, perf=[77, 66, 12, 29], mean perf=184/254 (0.7244%)
Round=7, perf=[79, 66, 11, 29], mean perf=185/254 (0.7283%)
Round=8, perf=[76, 67, 11, 30], mean perf=184/254 (0.7244%)
Round=9, perf=[76, 67, 11, 30], mean perf=184/254 (0.7244%)
Round=10, perf=[75, 66, 11, 30], mean perf=182/254 (0.7165%)
Round=11, perf=[76, 67, 11, 30], mean perf=184/254 (0.7244%)
Round=12, perf=[79, 66, 11, 29], mean perf=185/254 (0.7283%)
Round=13, perf=[76, 67, 11, 30], mean perf=184/254 (0.7244%)
Round=14, perf=[77, 67, 11, 29], mean perf=184/254 (0.7244%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=5.8368, delta=0.001, Perf=0.7257, seed=44
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.12789431434633755, expected_batch_size: 6 / 199
Round=0, perf=[67, 62, 7, 22], mean perf=158/254 (0.6220%)
Round=1, perf=[78, 69, 6, 19], mean perf=172/254 (0.6772%)
Round=2, perf=[76, 70, 6, 19], mean perf=171/254 (0.6732%)
Round=3, perf=[80, 70, 8, 19], mean perf=177/254 (0.6969%)
Round=4, perf=[76, 69, 10, 21], mean perf=176/254 (0.6929%)
Round=5, perf=[79, 63, 10, 21], mean perf=173/254 (0.6811%)
Round=6, perf=[75, 62, 10, 25], mean perf=172/254 (0.6772%)
Round=7, perf=[75, 63, 11, 29], mean perf=178/254 (0.7008%)
Round=8, perf=[75, 66, 10, 29], mean perf=180/254 (0.7087%)
Round=9, perf=[76, 66, 10, 28], mean perf=180/254 (0.7087%)
Round=10, perf=[76, 64, 9, 25], mean perf=174/254 (0.6850%)
Round=11, perf=[77, 58, 8, 24], mean perf=167/254 (0.6575%)
Round=12, perf=[73, 58, 6, 23], mean perf=160/254 (0.6299%)
Round=13, perf=[76, 62, 7, 21], mean perf=166/254 (0.6535%)
Round=14, perf=[73, 62, 7, 20], mean perf=162/254 (0.6378%)
Mean performance of Dropout, eps=0.8467889706696511, delta=0.001, Perf=0.6404
