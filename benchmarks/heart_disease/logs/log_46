../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the smallest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
noise_multiplier :  12.2509765625
Round=0, perf=[70, 57, 11, 28], mean perf=166/254 (0.6535%)
Round=1, perf=[73, 62, 11, 27], mean perf=173/254 (0.6811%)
Round=2, perf=[78, 62, 11, 28], mean perf=179/254 (0.7047%)
Round=3, perf=[79, 63, 11, 28], mean perf=181/254 (0.7126%)
Round=4, perf=[80, 64, 10, 29], mean perf=183/254 (0.7205%)
Round=5, perf=[80, 67, 10, 29], mean perf=186/254 (0.7323%)
Round=6, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=7, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=8, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=9, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=10, perf=[82, 68, 11, 29], mean perf=190/254 (0.7480%)
Round=11, perf=[83, 68, 11, 29], mean perf=191/254 (0.7520%)
Round=12, perf=[82, 68, 11, 30], mean perf=191/254 (0.7520%)
Round=13, perf=[82, 68, 11, 30], mean perf=191/254 (0.7520%)
Round=14, perf=[82, 69, 11, 30], mean perf=192/254 (0.7559%)
Mean performance without rPDP, Mean Perf=0.7533
r2 score of the curve fitting. 0.999881760403909
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[75, 63, 9, 26], mean perf=173/254 (0.6811%)
Round=1, perf=[69, 57, 8, 24], mean perf=158/254 (0.6220%)
Round=2, perf=[66, 55, 6, 25], mean perf=152/254 (0.5984%)
Round=3, perf=[68, 57, 10, 26], mean perf=161/254 (0.6339%)
Round=4, perf=[71, 58, 9, 26], mean perf=164/254 (0.6457%)
Round=5, perf=[75, 56, 9, 24], mean perf=164/254 (0.6457%)
Round=6, perf=[73, 61, 9, 25], mean perf=168/254 (0.6614%)
Round=7, perf=[75, 59, 8, 27], mean perf=169/254 (0.6654%)
Round=8, perf=[75, 63, 9, 25], mean perf=172/254 (0.6772%)
Round=9, perf=[74, 65, 9, 27], mean perf=175/254 (0.6890%)
Round=10, perf=[75, 66, 9, 29], mean perf=179/254 (0.7047%)
Round=11, perf=[73, 65, 11, 28], mean perf=177/254 (0.6969%)
Round=12, perf=[75, 64, 12, 31], mean perf=182/254 (0.7165%)
Round=13, perf=[73, 66, 11, 30], mean perf=180/254 (0.7087%)
Round=14, perf=[71, 67, 12, 30], mean perf=180/254 (0.7087%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.7113
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.025357178940808994 / 0.5924704691170143, expected_batch_size: 21 / 199
Round=0, perf=[70, 56, 11, 28], mean perf=165/254 (0.6496%)
Round=1, perf=[71, 58, 11, 27], mean perf=167/254 (0.6575%)
Round=2, perf=[72, 60, 12, 32], mean perf=176/254 (0.6929%)
Round=3, perf=[74, 62, 13, 32], mean perf=181/254 (0.7126%)
Round=4, perf=[77, 62, 13, 32], mean perf=184/254 (0.7244%)
Round=5, perf=[79, 63, 11, 30], mean perf=183/254 (0.7205%)
Round=6, perf=[77, 63, 11, 30], mean perf=181/254 (0.7126%)
Round=7, perf=[78, 64, 11, 29], mean perf=182/254 (0.7165%)
Round=8, perf=[78, 63, 12, 30], mean perf=183/254 (0.7205%)
Round=9, perf=[76, 61, 12, 32], mean perf=181/254 (0.7126%)
Round=10, perf=[77, 62, 12, 33], mean perf=184/254 (0.7244%)
Round=11, perf=[78, 62, 11, 32], mean perf=183/254 (0.7205%)
Round=12, perf=[78, 62, 13, 33], mean perf=186/254 (0.7323%)
Round=13, perf=[78, 62, 13, 33], mean perf=186/254 (0.7323%)
Round=14, perf=[80, 62, 13, 33], mean perf=188/254 (0.7402%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.001, Perf=0.7349, seed=46
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.12011964891700398, expected_batch_size: 7 / 199
Round=0, perf=[71, 58, 11, 28], mean perf=168/254 (0.6614%)
Round=1, perf=[72, 52, 9, 27], mean perf=160/254 (0.6299%)
Round=2, perf=[73, 61, 11, 28], mean perf=173/254 (0.6811%)
Round=3, perf=[76, 64, 11, 29], mean perf=180/254 (0.7087%)
Round=4, perf=[77, 62, 9, 26], mean perf=174/254 (0.6850%)
Round=5, perf=[78, 61, 10, 25], mean perf=174/254 (0.6850%)
Round=6, perf=[71, 60, 11, 26], mean perf=168/254 (0.6614%)
Round=7, perf=[77, 62, 11, 27], mean perf=177/254 (0.6969%)
Round=8, perf=[76, 58, 11, 27], mean perf=172/254 (0.6772%)
Round=9, perf=[76, 58, 11, 27], mean perf=172/254 (0.6772%)
Round=10, perf=[77, 58, 11, 26], mean perf=172/254 (0.6772%)
Round=11, perf=[79, 56, 12, 25], mean perf=172/254 (0.6772%)
Round=12, perf=[76, 57, 11, 25], mean perf=169/254 (0.6654%)
Round=13, perf=[75, 59, 11, 26], mean perf=171/254 (0.6732%)
Round=14, perf=[73, 59, 11, 26], mean perf=169/254 (0.6654%)
Mean performance of Dropout, eps=0.7882471351284466, delta=0.001, Perf=0.6680
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.02536581915202354 / 0.02536581915202354, expected_batch_size: 5 / 199
Round=0, perf=[67, 52, 12, 29], mean perf=160/254 (0.6299%)
Round=1, perf=[69, 64, 7, 25], mean perf=165/254 (0.6496%)
Round=2, perf=[76, 67, 10, 23], mean perf=176/254 (0.6929%)
Round=3, perf=[67, 68, 10, 24], mean perf=169/254 (0.6654%)
Round=4, perf=[69, 62, 12, 31], mean perf=174/254 (0.6850%)
Round=5, perf=[66, 59, 9, 27], mean perf=161/254 (0.6339%)
Round=6, perf=[70, 67, 11, 29], mean perf=177/254 (0.6969%)
Round=7, perf=[72, 68, 10, 28], mean perf=178/254 (0.7008%)
Round=8, perf=[71, 68, 7, 23], mean perf=169/254 (0.6654%)
Round=9, perf=[75, 69, 9, 23], mean perf=176/254 (0.6929%)
Round=10, perf=[70, 70, 8, 21], mean perf=169/254 (0.6654%)
Round=11, perf=[72, 66, 9, 20], mean perf=167/254 (0.6575%)
Round=12, perf=[73, 66, 9, 25], mean perf=173/254 (0.6811%)
Round=13, perf=[71, 64, 10, 25], mean perf=170/254 (0.6693%)
Round=14, perf=[77, 66, 10, 24], mean perf=177/254 (0.6969%)
Mean performance of StrongForAll, eps=0.10006067219391648, delta=0.001, Perf=0.6824
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.02536581915202354 / 0.3460625471496567, expected_batch_size: 13 / 199
Round=0, perf=[69, 58, 11, 29], mean perf=167/254 (0.6575%)
Round=1, perf=[74, 65, 11, 27], mean perf=177/254 (0.6969%)
Round=2, perf=[76, 63, 10, 29], mean perf=178/254 (0.7008%)
Round=3, perf=[78, 65, 9, 29], mean perf=181/254 (0.7126%)
Round=4, perf=[76, 63, 12, 31], mean perf=182/254 (0.7165%)
Round=5, perf=[76, 65, 11, 30], mean perf=182/254 (0.7165%)
Round=6, perf=[75, 66, 11, 31], mean perf=183/254 (0.7205%)
Round=7, perf=[76, 65, 11, 30], mean perf=182/254 (0.7165%)
Round=8, perf=[76, 67, 12, 29], mean perf=184/254 (0.7244%)
Round=9, perf=[76, 68, 13, 30], mean perf=187/254 (0.7362%)
Round=10, perf=[76, 67, 12, 30], mean perf=185/254 (0.7283%)
Round=11, perf=[77, 65, 12, 30], mean perf=184/254 (0.7244%)
Round=12, perf=[77, 68, 12, 30], mean perf=187/254 (0.7362%)
Round=13, perf=[77, 64, 12, 30], mean perf=183/254 (0.7205%)
Round=14, perf=[78, 66, 12, 30], mean perf=186/254 (0.7323%)
Mean performance of BoundedPareto, min_eps=0.1001, max_eps=2.6281, delta=0.001, Perf=0.7297, seed=46
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.0723985211908478, expected_batch_size: 3 / 199
Round=0, perf=[70, 50, 11, 24], mean perf=155/254 (0.6102%)
Round=1, perf=[69, 52, 8, 25], mean perf=154/254 (0.6063%)
Round=2, perf=[72, 59, 9, 26], mean perf=166/254 (0.6535%)
Round=3, perf=[77, 67, 9, 27], mean perf=180/254 (0.7087%)
Round=4, perf=[79, 65, 8, 26], mean perf=178/254 (0.7008%)
Round=5, perf=[81, 66, 9, 27], mean perf=183/254 (0.7205%)
Round=6, perf=[83, 66, 9, 27], mean perf=185/254 (0.7283%)
Round=7, perf=[78, 66, 11, 28], mean perf=183/254 (0.7205%)
Round=8, perf=[83, 68, 10, 27], mean perf=188/254 (0.7402%)
Round=9, perf=[80, 66, 10, 27], mean perf=183/254 (0.7205%)
Round=10, perf=[80, 65, 9, 24], mean perf=178/254 (0.7008%)
Round=11, perf=[79, 62, 10, 28], mean perf=179/254 (0.7047%)
Round=12, perf=[77, 61, 9, 26], mean perf=173/254 (0.6811%)
Round=13, perf=[83, 65, 10, 28], mean perf=186/254 (0.7323%)
Round=14, perf=[79, 66, 10, 27], mean perf=182/254 (0.7165%)
Mean performance of Dropout, eps=0.4358867398990982, delta=0.001, Perf=0.7100
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[68, 57, 8, 23], mean perf=156/254 (0.6142%)
Round=1, perf=[71, 54, 9, 22], mean perf=156/254 (0.6142%)
Round=2, perf=[72, 66, 12, 26], mean perf=176/254 (0.6929%)
Round=3, perf=[78, 61, 10, 26], mean perf=175/254 (0.6890%)
Round=4, perf=[76, 60, 10, 23], mean perf=169/254 (0.6654%)
Round=5, perf=[76, 57, 12, 25], mean perf=170/254 (0.6693%)
Round=6, perf=[83, 61, 14, 28], mean perf=186/254 (0.7323%)
Round=7, perf=[79, 60, 11, 28], mean perf=178/254 (0.7008%)
Round=8, perf=[77, 67, 12, 24], mean perf=180/254 (0.7087%)
Round=9, perf=[78, 65, 12, 25], mean perf=180/254 (0.7087%)
Round=10, perf=[76, 65, 11, 28], mean perf=180/254 (0.7087%)
Round=11, perf=[74, 61, 11, 26], mean perf=172/254 (0.6772%)
Round=12, perf=[70, 60, 9, 22], mean perf=161/254 (0.6339%)
Round=13, perf=[70, 62, 8, 22], mean perf=162/254 (0.6378%)
Round=14, perf=[74, 67, 9, 25], mean perf=175/254 (0.6890%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.6536
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.025357178940808994 / 0.6656136131774154, expected_batch_size: 19 / 199
Round=0, perf=[69, 57, 11, 27], mean perf=164/254 (0.6457%)
Round=1, perf=[69, 59, 12, 29], mean perf=169/254 (0.6654%)
Round=2, perf=[78, 66, 11, 30], mean perf=185/254 (0.7283%)
Round=3, perf=[78, 63, 10, 30], mean perf=181/254 (0.7126%)
Round=4, perf=[81, 67, 10, 30], mean perf=188/254 (0.7402%)
Round=5, perf=[82, 69, 10, 28], mean perf=189/254 (0.7441%)
Round=6, perf=[80, 66, 10, 30], mean perf=186/254 (0.7323%)
Round=7, perf=[79, 64, 10, 29], mean perf=182/254 (0.7165%)
Round=8, perf=[78, 64, 10, 29], mean perf=181/254 (0.7126%)
Round=9, perf=[78, 64, 11, 29], mean perf=182/254 (0.7165%)
Round=10, perf=[80, 64, 11, 29], mean perf=184/254 (0.7244%)
Round=11, perf=[80, 66, 11, 28], mean perf=185/254 (0.7283%)
Round=12, perf=[80, 66, 11, 28], mean perf=185/254 (0.7283%)
Round=13, perf=[80, 65, 12, 27], mean perf=184/254 (0.7244%)
Round=14, perf=[81, 65, 12, 27], mean perf=185/254 (0.7283%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=5.7875, delta=0.001, Perf=0.7270, seed=46
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.11092156850987282, expected_batch_size: 6 / 199
Round=0, perf=[68, 56, 8, 24], mean perf=156/254 (0.6142%)
Round=1, perf=[70, 67, 6, 21], mean perf=164/254 (0.6457%)
Round=2, perf=[73, 69, 10, 28], mean perf=180/254 (0.7087%)
Round=3, perf=[66, 61, 7, 23], mean perf=157/254 (0.6181%)
Round=4, perf=[65, 53, 9, 25], mean perf=152/254 (0.5984%)
Round=5, perf=[66, 50, 12, 28], mean perf=156/254 (0.6142%)
Round=6, perf=[68, 54, 11, 28], mean perf=161/254 (0.6339%)
Round=7, perf=[62, 54, 11, 30], mean perf=157/254 (0.6181%)
Round=8, perf=[64, 51, 11, 31], mean perf=157/254 (0.6181%)
Round=9, perf=[71, 57, 10, 30], mean perf=168/254 (0.6614%)
Round=10, perf=[69, 58, 11, 29], mean perf=167/254 (0.6575%)
Round=11, perf=[70, 57, 10, 31], mean perf=168/254 (0.6614%)
Round=12, perf=[71, 56, 11, 31], mean perf=169/254 (0.6654%)
Round=13, perf=[72, 56, 11, 30], mean perf=169/254 (0.6654%)
Round=14, perf=[76, 58, 11, 32], mean perf=177/254 (0.6969%)
Mean performance of Dropout, eps=0.7194019208983417, delta=0.001, Perf=0.6759
