../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the smallest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
noise_multiplier :  12.2509765625
Round=0, perf=[70, 57, 11, 28], mean perf=166/254 (0.6535%)
Round=1, perf=[72, 61, 11, 27], mean perf=171/254 (0.6732%)
Round=2, perf=[78, 62, 11, 28], mean perf=179/254 (0.7047%)
Round=3, perf=[79, 63, 11, 28], mean perf=181/254 (0.7126%)
Round=4, perf=[81, 64, 10, 29], mean perf=184/254 (0.7244%)
Round=5, perf=[80, 68, 10, 29], mean perf=187/254 (0.7362%)
Round=6, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=7, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=8, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=9, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=10, perf=[82, 68, 11, 29], mean perf=190/254 (0.7480%)
Round=11, perf=[82, 68, 11, 29], mean perf=190/254 (0.7480%)
Round=12, perf=[82, 68, 11, 30], mean perf=191/254 (0.7520%)
Round=13, perf=[80, 68, 11, 30], mean perf=189/254 (0.7441%)
Round=14, perf=[80, 68, 11, 30], mean perf=189/254 (0.7441%)
Mean performance without rPDP, Mean Perf=0.7467
r2 score of the curve fitting. 0.999881760403909
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[62, 51, 13, 27], mean perf=153/254 (0.6024%)
Round=1, perf=[64, 61, 12, 29], mean perf=166/254 (0.6535%)
Round=2, perf=[69, 56, 10, 27], mean perf=162/254 (0.6378%)
Round=3, perf=[70, 58, 10, 26], mean perf=164/254 (0.6457%)
Round=4, perf=[71, 56, 12, 28], mean perf=167/254 (0.6575%)
Round=5, perf=[68, 58, 12, 23], mean perf=161/254 (0.6339%)
Round=6, perf=[71, 62, 13, 25], mean perf=171/254 (0.6732%)
Round=7, perf=[75, 65, 13, 26], mean perf=179/254 (0.7047%)
Round=8, perf=[83, 68, 13, 25], mean perf=189/254 (0.7441%)
Round=9, perf=[79, 65, 12, 24], mean perf=180/254 (0.7087%)
Round=10, perf=[81, 68, 12, 23], mean perf=184/254 (0.7244%)
Round=11, perf=[81, 64, 12, 25], mean perf=182/254 (0.7165%)
Round=12, perf=[80, 65, 12, 26], mean perf=183/254 (0.7205%)
Round=13, perf=[79, 64, 12, 26], mean perf=181/254 (0.7126%)
Round=14, perf=[80, 68, 12, 28], mean perf=188/254 (0.7402%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.7244
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.025357178940808994 / 0.5924704691170143, expected_batch_size: 21 / 199
Round=0, perf=[68, 54, 11, 28], mean perf=161/254 (0.6339%)
Round=1, perf=[72, 56, 11, 29], mean perf=168/254 (0.6614%)
Round=2, perf=[70, 54, 11, 29], mean perf=164/254 (0.6457%)
Round=3, perf=[71, 53, 11, 30], mean perf=165/254 (0.6496%)
Round=4, perf=[72, 55, 13, 31], mean perf=171/254 (0.6732%)
Round=5, perf=[71, 55, 13, 31], mean perf=170/254 (0.6693%)
Round=6, perf=[70, 55, 12, 33], mean perf=170/254 (0.6693%)
Round=7, perf=[71, 58, 12, 32], mean perf=173/254 (0.6811%)
Round=8, perf=[75, 60, 12, 31], mean perf=178/254 (0.7008%)
Round=9, perf=[77, 61, 12, 31], mean perf=181/254 (0.7126%)
Round=10, perf=[78, 62, 12, 30], mean perf=182/254 (0.7165%)
Round=11, perf=[78, 62, 12, 30], mean perf=182/254 (0.7165%)
Round=12, perf=[78, 63, 12, 30], mean perf=183/254 (0.7205%)
Round=13, perf=[78, 65, 12, 30], mean perf=185/254 (0.7283%)
Round=14, perf=[79, 65, 12, 30], mean perf=186/254 (0.7323%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.001, Perf=0.7270, seed=45
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.12011964891700398, expected_batch_size: 7 / 199
Round=0, perf=[68, 51, 11, 26], mean perf=156/254 (0.6142%)
Round=1, perf=[65, 52, 12, 28], mean perf=157/254 (0.6181%)
Round=2, perf=[75, 62, 10, 27], mean perf=174/254 (0.6850%)
Round=3, perf=[77, 65, 10, 26], mean perf=178/254 (0.7008%)
Round=4, perf=[80, 61, 10, 27], mean perf=178/254 (0.7008%)
Round=5, perf=[80, 64, 11, 28], mean perf=183/254 (0.7205%)
Round=6, perf=[81, 64, 11, 29], mean perf=185/254 (0.7283%)
Round=7, perf=[78, 65, 11, 30], mean perf=184/254 (0.7244%)
Round=8, perf=[82, 63, 11, 31], mean perf=187/254 (0.7362%)
Round=9, perf=[79, 63, 9, 30], mean perf=181/254 (0.7126%)
Round=10, perf=[83, 63, 11, 30], mean perf=187/254 (0.7362%)
Round=11, perf=[86, 64, 10, 30], mean perf=190/254 (0.7480%)
Round=12, perf=[82, 66, 10, 30], mean perf=188/254 (0.7402%)
Round=13, perf=[82, 69, 10, 30], mean perf=191/254 (0.7520%)
Round=14, perf=[81, 66, 10, 29], mean perf=186/254 (0.7323%)
Mean performance of Dropout, eps=0.7882471351284466, delta=0.001, Perf=0.7415
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.02536822136423391 / 0.02536822136423391, expected_batch_size: 5 / 199
Round=0, perf=[51, 45, 7, 21], mean perf=124/254 (0.4882%)
Round=1, perf=[64, 45, 10, 23], mean perf=142/254 (0.5591%)
Round=2, perf=[61, 42, 9, 25], mean perf=137/254 (0.5394%)
Round=3, perf=[66, 44, 10, 24], mean perf=144/254 (0.5669%)
Round=4, perf=[62, 52, 12, 28], mean perf=154/254 (0.6063%)
Round=5, perf=[60, 51, 12, 28], mean perf=151/254 (0.5945%)
Round=6, perf=[64, 50, 11, 27], mean perf=152/254 (0.5984%)
Round=7, perf=[64, 55, 12, 27], mean perf=158/254 (0.6220%)
Round=8, perf=[64, 50, 12, 26], mean perf=152/254 (0.5984%)
Round=9, perf=[64, 51, 12, 26], mean perf=153/254 (0.6024%)
Round=10, perf=[68, 51, 12, 24], mean perf=155/254 (0.6102%)
Round=11, perf=[62, 49, 12, 24], mean perf=147/254 (0.5787%)
Round=12, perf=[59, 52, 12, 25], mean perf=148/254 (0.5827%)
Round=13, perf=[59, 51, 12, 25], mean perf=147/254 (0.5787%)
Round=14, perf=[59, 49, 12, 25], mean perf=145/254 (0.5709%)
Mean performance of StrongForAll, eps=0.10007754076934075, delta=0.001, Perf=0.5774
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.025380489353032075 / 0.369837680446026, expected_batch_size: 13 / 199
Round=0, perf=[64, 54, 11, 27], mean perf=156/254 (0.6142%)
Round=1, perf=[72, 62, 13, 29], mean perf=176/254 (0.6929%)
Round=2, perf=[74, 64, 12, 28], mean perf=178/254 (0.7008%)
Round=3, perf=[74, 64, 12, 31], mean perf=181/254 (0.7126%)
Round=4, perf=[77, 68, 10, 29], mean perf=184/254 (0.7244%)
Round=5, perf=[74, 68, 12, 31], mean perf=185/254 (0.7283%)
Round=6, perf=[74, 68, 12, 28], mean perf=182/254 (0.7165%)
Round=7, perf=[75, 67, 12, 28], mean perf=182/254 (0.7165%)
Round=8, perf=[74, 67, 12, 29], mean perf=182/254 (0.7165%)
Round=9, perf=[76, 67, 11, 29], mean perf=183/254 (0.7205%)
Round=10, perf=[76, 67, 11, 28], mean perf=182/254 (0.7165%)
Round=11, perf=[77, 66, 11, 29], mean perf=183/254 (0.7205%)
Round=12, perf=[78, 66, 12, 30], mean perf=186/254 (0.7323%)
Round=13, perf=[79, 68, 13, 29], mean perf=189/254 (0.7441%)
Round=14, perf=[76, 67, 12, 30], mean perf=185/254 (0.7283%)
Mean performance of BoundedPareto, min_eps=0.1002, max_eps=2.8393, delta=0.001, Perf=0.7349, seed=45
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.06911647094528962, expected_batch_size: 3 / 199
Round=0, perf=[80, 75, 8, 27], mean perf=190/254 (0.7480%)
Round=1, perf=[76, 67, 12, 32], mean perf=187/254 (0.7362%)
Round=2, perf=[75, 64, 10, 29], mean perf=178/254 (0.7008%)
Round=3, perf=[76, 61, 11, 30], mean perf=178/254 (0.7008%)
Round=4, perf=[76, 61, 11, 30], mean perf=178/254 (0.7008%)
Round=5, perf=[78, 60, 10, 29], mean perf=177/254 (0.6969%)
Round=6, perf=[76, 56, 10, 31], mean perf=173/254 (0.6811%)
Round=7, perf=[74, 52, 11, 30], mean perf=167/254 (0.6575%)
Round=8, perf=[78, 53, 11, 30], mean perf=172/254 (0.6772%)
Round=9, perf=[78, 60, 12, 33], mean perf=183/254 (0.7205%)
Round=10, perf=[76, 49, 10, 32], mean perf=167/254 (0.6575%)
Round=11, perf=[75, 51, 10, 34], mean perf=170/254 (0.6693%)
Round=12, perf=[63, 46, 10, 34], mean perf=153/254 (0.6024%)
Round=13, perf=[51, 34, 10, 33], mean perf=128/254 (0.5039%)
Round=14, perf=[56, 41, 9, 33], mean perf=139/254 (0.5472%)
Mean performance of Dropout, eps=0.4120874966640785, delta=0.001, Perf=0.5512
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[63, 48, 7, 23], mean perf=141/254 (0.5551%)
Round=1, perf=[64, 57, 8, 26], mean perf=155/254 (0.6102%)
Round=2, perf=[66, 54, 8, 25], mean perf=153/254 (0.6024%)
Round=3, perf=[68, 54, 8, 30], mean perf=160/254 (0.6299%)
Round=4, perf=[65, 50, 7, 29], mean perf=151/254 (0.5945%)
Round=5, perf=[71, 51, 6, 30], mean perf=158/254 (0.6220%)
Round=6, perf=[67, 52, 6, 29], mean perf=154/254 (0.6063%)
Round=7, perf=[67, 56, 6, 29], mean perf=158/254 (0.6220%)
Round=8, perf=[75, 59, 7, 28], mean perf=169/254 (0.6654%)
Round=9, perf=[77, 59, 9, 29], mean perf=174/254 (0.6850%)
Round=10, perf=[70, 60, 9, 26], mean perf=165/254 (0.6496%)
Round=11, perf=[72, 62, 10, 28], mean perf=172/254 (0.6772%)
Round=12, perf=[69, 60, 9, 26], mean perf=164/254 (0.6457%)
Round=13, perf=[71, 65, 9, 27], mean perf=172/254 (0.6772%)
Round=14, perf=[72, 63, 11, 27], mean perf=173/254 (0.6811%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.6680
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.025357178940808994 / 0.7121580217663597, expected_batch_size: 17 / 199
Round=0, perf=[70, 58, 11, 26], mean perf=165/254 (0.6496%)
Round=1, perf=[74, 60, 11, 28], mean perf=173/254 (0.6811%)
Round=2, perf=[76, 63, 12, 29], mean perf=180/254 (0.7087%)
Round=3, perf=[80, 61, 11, 30], mean perf=182/254 (0.7165%)
Round=4, perf=[80, 61, 11, 33], mean perf=185/254 (0.7283%)
Round=5, perf=[81, 61, 12, 29], mean perf=183/254 (0.7205%)
Round=6, perf=[82, 63, 11, 28], mean perf=184/254 (0.7244%)
Round=7, perf=[81, 64, 12, 31], mean perf=188/254 (0.7402%)
Round=8, perf=[80, 63, 12, 32], mean perf=187/254 (0.7362%)
Round=9, perf=[80, 59, 11, 29], mean perf=179/254 (0.7047%)
Round=10, perf=[81, 64, 11, 31], mean perf=187/254 (0.7362%)
Round=11, perf=[81, 65, 11, 30], mean perf=187/254 (0.7362%)
Round=12, perf=[81, 64, 11, 30], mean perf=186/254 (0.7323%)
Round=13, perf=[81, 63, 11, 29], mean perf=184/254 (0.7244%)
Round=14, perf=[82, 63, 11, 30], mean perf=186/254 (0.7323%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.3102, delta=0.001, Perf=0.7297, seed=45
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.11340284539690337, expected_batch_size: 5 / 199
Round=0, perf=[68, 52, 12, 31], mean perf=163/254 (0.6417%)
Round=1, perf=[65, 53, 12, 30], mean perf=160/254 (0.6299%)
Round=2, perf=[56, 48, 12, 29], mean perf=145/254 (0.5709%)
Round=3, perf=[65, 53, 11, 29], mean perf=158/254 (0.6220%)
Round=4, perf=[73, 59, 10, 29], mean perf=171/254 (0.6732%)
Round=5, perf=[64, 52, 10, 33], mean perf=159/254 (0.6260%)
Round=6, perf=[66, 52, 10, 31], mean perf=159/254 (0.6260%)
Round=7, perf=[66, 50, 10, 31], mean perf=157/254 (0.6181%)
Round=8, perf=[67, 54, 11, 33], mean perf=165/254 (0.6496%)
Round=9, perf=[65, 55, 11, 32], mean perf=163/254 (0.6417%)
Round=10, perf=[66, 53, 12, 34], mean perf=165/254 (0.6496%)
Round=11, perf=[69, 57, 12, 34], mean perf=172/254 (0.6772%)
Round=12, perf=[69, 54, 12, 34], mean perf=169/254 (0.6654%)
Round=13, perf=[65, 54, 11, 33], mean perf=163/254 (0.6417%)
Round=14, perf=[69, 57, 11, 33], mean perf=170/254 (0.6693%)
Mean performance of Dropout, eps=0.7379295081222828, delta=0.001, Perf=0.6588
