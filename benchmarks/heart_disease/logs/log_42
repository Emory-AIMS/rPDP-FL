../../fedrpdp/accountants/analysis/rdp.py:358: UserWarning: Optimal order is the smallest alpha. Please consider expanding the range of alphas to get a tighter privacy bound.
  f"Optimal order is the {extreme} alpha. Please consider expanding the range of alphas to get a tighter privacy bound."
noise_multiplier :  12.2509765625
Round=0, perf=[70, 57, 11, 28], mean perf=166/254 (0.6535%)
Round=1, perf=[73, 61, 11, 27], mean perf=172/254 (0.6772%)
Round=2, perf=[77, 62, 11, 28], mean perf=178/254 (0.7008%)
Round=3, perf=[79, 63, 10, 28], mean perf=180/254 (0.7087%)
Round=4, perf=[80, 64, 10, 29], mean perf=183/254 (0.7205%)
Round=5, perf=[80, 68, 10, 29], mean perf=187/254 (0.7362%)
Round=6, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=7, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=8, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=9, perf=[82, 68, 10, 30], mean perf=190/254 (0.7480%)
Round=10, perf=[82, 68, 11, 29], mean perf=190/254 (0.7480%)
Round=11, perf=[81, 68, 11, 29], mean perf=189/254 (0.7441%)
Round=12, perf=[82, 68, 11, 30], mean perf=191/254 (0.7520%)
Round=13, perf=[82, 68, 11, 30], mean perf=191/254 (0.7520%)
Round=14, perf=[81, 68, 11, 30], mean perf=190/254 (0.7480%)
Mean performance without rPDP, Mean Perf=0.7507
r2 score of the curve fitting. 0.999881760403909
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[66, 59, 9, 20], mean perf=154/254 (0.6063%)
Round=1, perf=[72, 62, 9, 26], mean perf=169/254 (0.6654%)
Round=2, perf=[82, 68, 9, 24], mean perf=183/254 (0.7205%)
Round=3, perf=[75, 63, 9, 22], mean perf=169/254 (0.6654%)
Round=4, perf=[79, 68, 8, 21], mean perf=176/254 (0.6929%)
Round=5, perf=[77, 68, 10, 22], mean perf=177/254 (0.6969%)
Round=6, perf=[79, 68, 10, 25], mean perf=182/254 (0.7165%)
Round=7, perf=[80, 68, 10, 24], mean perf=182/254 (0.7165%)
Round=8, perf=[77, 68, 8, 23], mean perf=176/254 (0.6929%)
Round=9, perf=[78, 64, 7, 22], mean perf=171/254 (0.6732%)
Round=10, perf=[77, 64, 6, 19], mean perf=166/254 (0.6535%)
Round=11, perf=[75, 66, 7, 20], mean perf=168/254 (0.6614%)
Round=12, perf=[71, 63, 8, 24], mean perf=166/254 (0.6535%)
Round=13, perf=[73, 62, 8, 21], mean perf=164/254 (0.6457%)
Round=14, perf=[72, 63, 8, 24], mean perf=167/254 (0.6575%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.6522
 We run FedAvg with rPDP (ThreeLevels-0) ...
sample_rate: 0.025357178940808994 / 0.5924704691170143, expected_batch_size: 21 / 199
Round=0, perf=[72, 53, 11, 26], mean perf=162/254 (0.6378%)
Round=1, perf=[75, 55, 11, 27], mean perf=168/254 (0.6614%)
Round=2, perf=[73, 57, 11, 30], mean perf=171/254 (0.6732%)
Round=3, perf=[74, 56, 12, 29], mean perf=171/254 (0.6732%)
Round=4, perf=[76, 58, 11, 28], mean perf=173/254 (0.6811%)
Round=5, perf=[81, 60, 12, 29], mean perf=182/254 (0.7165%)
Round=6, perf=[79, 63, 11, 29], mean perf=182/254 (0.7165%)
Round=7, perf=[79, 63, 11, 29], mean perf=182/254 (0.7165%)
Round=8, perf=[79, 63, 12, 29], mean perf=183/254 (0.7205%)
Round=9, perf=[81, 63, 12, 29], mean perf=185/254 (0.7283%)
Round=10, perf=[80, 63, 12, 28], mean perf=183/254 (0.7205%)
Round=11, perf=[81, 63, 11, 28], mean perf=183/254 (0.7205%)
Round=12, perf=[80, 63, 11, 29], mean perf=183/254 (0.7205%)
Round=13, perf=[80, 64, 12, 29], mean perf=185/254 (0.7283%)
Round=14, perf=[80, 63, 13, 30], mean perf=186/254 (0.7323%)
Mean performance of ThreeLevels, min_eps=0.1000, max_eps=5.0000, delta=0.001, Perf=0.7270, seed=42
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.12011964891700398, expected_batch_size: 7 / 199
Round=0, perf=[68, 48, 12, 29], mean perf=157/254 (0.6181%)
Round=1, perf=[70, 53, 13, 32], mean perf=168/254 (0.6614%)
Round=2, perf=[70, 54, 12, 34], mean perf=170/254 (0.6693%)
Round=3, perf=[75, 63, 10, 33], mean perf=181/254 (0.7126%)
Round=4, perf=[73, 62, 10, 33], mean perf=178/254 (0.7008%)
Round=5, perf=[68, 57, 12, 32], mean perf=169/254 (0.6654%)
Round=6, perf=[71, 63, 12, 33], mean perf=179/254 (0.7047%)
Round=7, perf=[72, 64, 11, 34], mean perf=181/254 (0.7126%)
Round=8, perf=[72, 64, 12, 32], mean perf=180/254 (0.7087%)
Round=9, perf=[76, 64, 12, 32], mean perf=184/254 (0.7244%)
Round=10, perf=[76, 64, 12, 32], mean perf=184/254 (0.7244%)
Round=11, perf=[77, 65, 12, 33], mean perf=187/254 (0.7362%)
Round=12, perf=[78, 62, 11, 33], mean perf=184/254 (0.7244%)
Round=13, perf=[75, 58, 11, 32], mean perf=176/254 (0.6929%)
Round=14, perf=[77, 62, 11, 35], mean perf=185/254 (0.7283%)
Mean performance of Dropout, eps=0.7882471351284466, delta=0.001, Perf=0.7152
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.0254096711662828 / 0.0254096711662828, expected_batch_size: 5 / 199
Round=0, perf=[64, 59, 11, 23], mean perf=157/254 (0.6181%)
Round=1, perf=[76, 65, 9, 27], mean perf=177/254 (0.6969%)
Round=2, perf=[79, 68, 10, 31], mean perf=188/254 (0.7402%)
Round=3, perf=[75, 66, 10, 26], mean perf=177/254 (0.6969%)
Round=4, perf=[75, 62, 10, 28], mean perf=175/254 (0.6890%)
Round=5, perf=[74, 65, 10, 28], mean perf=177/254 (0.6969%)
Round=6, perf=[76, 65, 11, 28], mean perf=180/254 (0.7087%)
Round=7, perf=[70, 62, 11, 31], mean perf=174/254 (0.6850%)
Round=8, perf=[75, 64, 10, 30], mean perf=179/254 (0.7047%)
Round=9, perf=[77, 70, 12, 29], mean perf=188/254 (0.7402%)
Round=10, perf=[77, 69, 12, 32], mean perf=190/254 (0.7480%)
Round=11, perf=[76, 63, 11, 28], mean perf=178/254 (0.7008%)
Round=12, perf=[77, 64, 11, 28], mean perf=180/254 (0.7087%)
Round=13, perf=[73, 65, 11, 30], mean perf=179/254 (0.7047%)
Round=14, perf=[76, 67, 12, 30], mean perf=185/254 (0.7283%)
Mean performance of StrongForAll, eps=0.10036860995913424, delta=0.001, Perf=0.7139
 We run FedAvg with rPDP (BoundedPareto-0) ...
sample_rate: 0.0254096711662828 / 0.3631370944535394, expected_batch_size: 14 / 199
Round=0, perf=[69, 55, 11, 27], mean perf=162/254 (0.6378%)
Round=1, perf=[70, 58, 11, 25], mean perf=164/254 (0.6457%)
Round=2, perf=[68, 67, 10, 26], mean perf=171/254 (0.6732%)
Round=3, perf=[75, 69, 10, 26], mean perf=180/254 (0.7087%)
Round=4, perf=[74, 69, 10, 25], mean perf=178/254 (0.7008%)
Round=5, perf=[79, 70, 10, 26], mean perf=185/254 (0.7283%)
Round=6, perf=[81, 71, 9, 24], mean perf=185/254 (0.7283%)
Round=7, perf=[80, 72, 9, 26], mean perf=187/254 (0.7362%)
Round=8, perf=[80, 72, 10, 27], mean perf=189/254 (0.7441%)
Round=9, perf=[81, 69, 10, 29], mean perf=189/254 (0.7441%)
Round=10, perf=[82, 69, 10, 28], mean perf=189/254 (0.7441%)
Round=11, perf=[82, 68, 10, 28], mean perf=188/254 (0.7402%)
Round=12, perf=[84, 69, 10, 29], mean perf=192/254 (0.7559%)
Round=13, perf=[82, 69, 11, 30], mean perf=192/254 (0.7559%)
Round=14, perf=[79, 70, 11, 30], mean perf=190/254 (0.7480%)
Mean performance of BoundedPareto, min_eps=0.1004, max_eps=2.7794, delta=0.001, Perf=0.7533, seed=42
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.07232442990593815, expected_batch_size: 4 / 199
Round=0, perf=[63, 51, 7, 26], mean perf=147/254 (0.5787%)
Round=1, perf=[70, 54, 10, 29], mean perf=163/254 (0.6417%)
Round=2, perf=[66, 52, 8, 27], mean perf=153/254 (0.6024%)
Round=3, perf=[60, 47, 8, 27], mean perf=142/254 (0.5591%)
Round=4, perf=[62, 46, 9, 26], mean perf=143/254 (0.5630%)
Round=5, perf=[52, 40, 8, 26], mean perf=126/254 (0.4961%)
Round=6, perf=[57, 42, 8, 26], mean perf=133/254 (0.5236%)
Round=7, perf=[49, 40, 5, 24], mean perf=118/254 (0.4646%)
Round=8, perf=[55, 45, 7, 25], mean perf=132/254 (0.5197%)
Round=9, perf=[41, 40, 6, 22], mean perf=109/254 (0.4291%)
Round=10, perf=[41, 40, 7, 23], mean perf=111/254 (0.4370%)
Round=11, perf=[49, 44, 7, 21], mean perf=121/254 (0.4764%)
Round=12, perf=[46, 46, 7, 21], mean perf=120/254 (0.4724%)
Round=13, perf=[54, 49, 7, 19], mean perf=129/254 (0.5079%)
Round=14, perf=[52, 52, 7, 19], mean perf=130/254 (0.5118%)
Mean performance of Dropout, eps=0.43534886913948817, delta=0.001, Perf=0.4974
heart_disease_rpdp_fed.py:167: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  e = np.array([BoundedFunc(GENERATE_EPSILONS[name](len(train_dl.dataset), SETTINGS[name][int(p_id)])) for train_dl in training_dls])
sample_rate: 0.025357178940808994 / 0.025357178940808994, expected_batch_size: 5 / 199
Round=0, perf=[65, 53, 9, 27], mean perf=154/254 (0.6063%)
Round=1, perf=[65, 62, 4, 22], mean perf=153/254 (0.6024%)
Round=2, perf=[62, 56, 7, 22], mean perf=147/254 (0.5787%)
Round=3, perf=[69, 59, 7, 25], mean perf=160/254 (0.6299%)
Round=4, perf=[70, 57, 5, 23], mean perf=155/254 (0.6102%)
Round=5, perf=[66, 60, 7, 25], mean perf=158/254 (0.6220%)
Round=6, perf=[70, 57, 9, 28], mean perf=164/254 (0.6457%)
Round=7, perf=[67, 57, 6, 26], mean perf=156/254 (0.6142%)
Round=8, perf=[75, 60, 11, 29], mean perf=175/254 (0.6890%)
Round=9, perf=[71, 64, 8, 29], mean perf=172/254 (0.6772%)
Round=10, perf=[76, 64, 9, 27], mean perf=176/254 (0.6929%)
Round=11, perf=[79, 64, 10, 28], mean perf=181/254 (0.7126%)
Round=12, perf=[73, 65, 11, 27], mean perf=176/254 (0.6929%)
Round=13, perf=[74, 66, 12, 28], mean perf=180/254 (0.7087%)
Round=14, perf=[75, 63, 10, 26], mean perf=174/254 (0.6850%)
Mean performance of StrongForAll, eps=0.1, delta=0.001, Perf=0.6955
 We run FedAvg with rPDP (BoundedMixGauss-0) ...
sample_rate: 0.025357178940808994 / 0.6974514639552108, expected_batch_size: 20 / 199
Round=0, perf=[67, 59, 10, 25], mean perf=161/254 (0.6339%)
Round=1, perf=[71, 65, 11, 27], mean perf=174/254 (0.6850%)
Round=2, perf=[76, 66, 11, 27], mean perf=180/254 (0.7087%)
Round=3, perf=[77, 66, 11, 27], mean perf=181/254 (0.7126%)
Round=4, perf=[77, 67, 11, 27], mean perf=182/254 (0.7165%)
Round=5, perf=[77, 70, 11, 28], mean perf=186/254 (0.7323%)
Round=6, perf=[76, 69, 11, 28], mean perf=184/254 (0.7244%)
Round=7, perf=[76, 68, 11, 28], mean perf=183/254 (0.7205%)
Round=8, perf=[77, 67, 11, 28], mean perf=183/254 (0.7205%)
Round=9, perf=[77, 69, 11, 29], mean perf=186/254 (0.7323%)
Round=10, perf=[77, 69, 11, 29], mean perf=186/254 (0.7323%)
Round=11, perf=[77, 67, 11, 28], mean perf=183/254 (0.7205%)
Round=12, perf=[77, 68, 11, 28], mean perf=184/254 (0.7244%)
Round=13, perf=[77, 66, 11, 28], mean perf=182/254 (0.7165%)
Round=14, perf=[78, 69, 11, 28], mean perf=186/254 (0.7323%)
Mean performance of BoundedMixGauss, min_eps=0.1000, max_eps=6.1432, delta=0.001, Perf=0.7244, seed=42
 We run FedAvg with rPDP (Dropout) ...
sample_rate: 0.0 / 0.13793268101657183, expected_batch_size: 6 / 199
Round=0, perf=[75, 65, 10, 28], mean perf=178/254 (0.7008%)
Round=1, perf=[75, 65, 10, 27], mean perf=177/254 (0.6969%)
Round=2, perf=[70, 66, 11, 26], mean perf=173/254 (0.6811%)
Round=3, perf=[72, 62, 10, 28], mean perf=172/254 (0.6772%)
Round=4, perf=[70, 62, 10, 26], mean perf=168/254 (0.6614%)
Round=5, perf=[72, 63, 10, 26], mean perf=171/254 (0.6732%)
Round=6, perf=[71, 63, 10, 28], mean perf=172/254 (0.6772%)
Round=7, perf=[79, 64, 11, 30], mean perf=184/254 (0.7244%)
Round=8, perf=[76, 65, 11, 28], mean perf=180/254 (0.7087%)
Round=9, perf=[77, 66, 11, 30], mean perf=184/254 (0.7244%)
Round=10, perf=[76, 62, 11, 29], mean perf=178/254 (0.7008%)
Round=11, perf=[76, 62, 12, 29], mean perf=179/254 (0.7047%)
Round=12, perf=[77, 67, 12, 30], mean perf=186/254 (0.7323%)
Round=13, perf=[76, 67, 12, 29], mean perf=184/254 (0.7244%)
Round=14, perf=[76, 66, 10, 28], mean perf=180/254 (0.7087%)
Mean performance of Dropout, eps=0.922854075789177, delta=0.001, Perf=0.7218
